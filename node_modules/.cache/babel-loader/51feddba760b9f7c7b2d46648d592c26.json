{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\redBlack\\\\DataStructure.js\";\nimport React from 'react';\nvar black = 0;\nvar red = 1;\n\nclass NullNode {\n  constructor() {\n    this.color = black;\n    this.isNull = true;\n    this.parent = null;\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      className: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `null black`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, \"null\"));\n  }\n\n}\n\nclass Node {\n  constructor(value) {\n    let newNullNode = new NullNode();\n    newNullNode.parent = this;\n    this.value = value;\n    this.color = red;\n    this.right = newNullNode;\n    this.left = newNullNode;\n    this.parent = null;\n    this.isNull = false;\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `normal red`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, this.value), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }\n    }, this.left.html, \" \", this.right.html));\n  } //Updating html of a node\n\n\n  setHtml() {\n    let color = this.color ? 'red' : 'black';\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `normal ${color}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 5\n      }\n    }, this.value), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, this.left.html, \" \", this.right.html));\n  } //Updating html of the whole tree\n\n\n  updateRootHtml() {\n    if (this.parent !== null) {\n      if (this.parent.left === this) this.parent.insert(this, true);else this.parent.insert(this, false);\n    }\n  } //Inserting new node to tree\n\n\n  insert() {\n    this.setHtml();\n    this.updateRootHtml();\n  } //Adds Highlight to node html\n\n\n  addHighlight() {\n    let color = this.color ? 'red' : 'black';\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: `normal ${color} highlight`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, this.value), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }, this.left.html, \" \", this.right.html));\n    this.updateRootHtml();\n  } //Clears Highlight of the node html\n\n\n  clearHighlight() {\n    this.setHtml();\n    this.updateRootHtml();\n  }\n\n}\n\nclass RBT {\n  constructor(num = 0) {\n    let newNullNode = new NullNode();\n    this.root = newNullNode;\n\n    if (num) {\n      this.generateRandomBST(num);\n    }\n\n    this.highlighted = null;\n    this.leafDepth = -1;\n  } //Helper functions\n  //Rotate right\n\n\n  rotateRight(node, toRecolor) {\n    let parent = node.parent;\n    node.parent = parent.parent;\n\n    if (parent.parent !== null) {\n      if (parent.parent.left === parent) {\n        parent.parent.left = node;\n      } else {\n        parent.parent.right = node;\n      }\n    }\n\n    let right = node.right;\n    node.right = parent;\n    parent.parent = node;\n    parent.left = right;\n    right.parent = parent;\n\n    if (toRecolor) {\n      node.color = black;\n      parent.color = red;\n    }\n  } //Rotate left\n\n\n  rotateLeft(node, toRecolor) {\n    let parent = node.parent;\n    node.parent = parent.parent;\n\n    if (parent.parent !== null) {\n      if (parent.parent.right === parent) {\n        parent.parent.right = node;\n      } else {\n        parent.parent.left = node;\n      }\n    }\n\n    let left = node.left;\n    node.left = parent;\n    parent.parent = node;\n    parent.right = left;\n    left.parent = parent;\n\n    if (toRecolor) {\n      node.color = black;\n      parent.color = red;\n    }\n  } //Find sibling\n\n\n  siblingOf(node) {\n    if (node.parent === null) return null;\n\n    if (node.parent.left === node) {\n      return node.parent.right;\n    } else {\n      return node.parent.left;\n    }\n  } //Finding min value\n\n\n  findMin(node = this.root) {\n    if (node.isNull) {\n      return node;\n    } else if (node.left.isNull) {\n      return node;\n    } else {\n      return this.findMin(node.left);\n    }\n  } //Insert\n\n\n  insert(value) {\n    this.root = this.insertNode(null, this.root, value);\n  } //Insert helper function\n\n\n  insertNode(parent, node, value) {\n    if (node.isNull) {\n      let newNode = new Node(value);\n\n      if (parent === null) {\n        newNode.color = black;\n        newNode.insert();\n        return newNode;\n      } else {\n        newNode.parent = parent;\n        return newNode;\n      }\n    }\n\n    if (node.value === value) {\n      return node;\n    }\n\n    let isLeft;\n\n    if (node.value > value) {\n      let left = this.insertNode(node, node.left, value);\n\n      if (left === node.parent) {\n        node.insert();\n        return left;\n      }\n\n      node.left = left;\n      isLeft = true;\n    } else {\n      let right = this.insertNode(node, node.right, value);\n\n      if (right === node.parent) {\n        node.insert();\n        return right;\n      }\n\n      node.right = right;\n      isLeft = false;\n    }\n\n    if (isLeft) {\n      if (node.left.color === red && node.color === red) {\n        let sibling = this.siblingOf(node);\n\n        if (sibling.color === black || sibling.isNull) {\n          if (node.parent.left === node) {\n            this.rotateRight(node, true);\n          } else {\n            this.rotateRight(node.left, false);\n            node = node.parent;\n            this.rotateLeft(node, true);\n          }\n        } else {\n          node.color = black;\n          sibling.color = black;\n\n          if (node.parent.parent !== null) {\n            node.parent.color = red;\n          }\n        }\n      }\n    } else {\n      if (node.right.color === red && node.color === red) {\n        let sibling = this.siblingOf(node);\n\n        if (sibling.color === black || sibling.isNull) {\n          if (node.parent.right === node) {\n            this.rotateLeft(node, true);\n          } else {\n            this.rotateLeft(node.right, false);\n            node = node.parent;\n            this.rotateRight(node, true);\n          }\n        } else {\n          node.color = black;\n          sibling.color = black;\n\n          if (node.parent.parent !== null) {\n            node.parent.color = red;\n          }\n        }\n      }\n    }\n\n    if (!node.left.isNull) node.left.insert();\n    if (!node.right.isNull) node.right.insert();\n    return node;\n  } //Delete Node\n\n\n  remove(value, node = this.root) {\n    this.clearHighlight();\n\n    if (node.isNull) {\n      return;\n    }\n\n    if (node.value === value) {\n      if (node.left.isNull || node.right.isNull) {\n        let tempParent = node.parent;\n        this.deleteOneChild(node);\n\n        if (tempParent) {\n          if (!tempParent.left.isNull) tempParent.left.insert();\n          if (!tempParent.right.isNull) tempParent.right.insert();\n          tempParent.insert();\n          if (tempParent.parent) tempParent.parent.insert();\n        } else if (!this.root.isNull) this.root.insert();\n      } else {\n        let smallestRight = this.findMin(node.right);\n        node.value = smallestRight.value;\n        node.insert();\n        this.remove(smallestRight.value, node.right);\n      }\n    }\n\n    if (node.value > value) {\n      this.remove(value, node.left);\n    } else {\n      this.remove(value, node.right);\n    }\n  } //Delete helper functions\n\n\n  deleteOneChild(node) {\n    let child;\n\n    if (node.left.isNull) {\n      child = node.right;\n    } else {\n      child = node.left;\n    }\n\n    this.replaceChild(child, node);\n\n    if (node.color === black) {\n      if (child.color === red) {\n        child.color = black;\n        child.insert();\n      } else this.deleteCase1(child);\n    }\n  } //All cases\n\n\n  deleteCase1(node) {\n    if (node.parent === null) {\n      this.root = node;\n      if (!this.root.isNull) this.root.insert();\n      return;\n    }\n\n    this.deleteCase2(node);\n  }\n\n  deleteCase2(node) {\n    let sibling = this.siblingOf(node);\n\n    if (sibling.color === red) {\n      if (sibling.parent.left === sibling) this.rotateRight(sibling, true);else this.rotateLeft(sibling, true);\n      if (sibling.parent === null) this.root = sibling;\n    }\n\n    this.deleteCase3(node);\n  }\n\n  deleteCase3(node) {\n    let sibling = this.siblingOf(node);\n\n    if (node.parent.color === black && sibling.color === black && sibling.left.color === black && sibling.right.color === black) {\n      sibling.color = red;\n      this.deleteCase1(node.parent);\n    } else {\n      this.deleteCase4(node);\n    }\n  }\n\n  deleteCase4(node) {\n    let sibling = this.siblingOf(node);\n\n    if (node.parent.color === red && sibling.color === black && sibling.left.color === black && sibling.right.color === black) {\n      sibling.color = red;\n      node.parent.color = black;\n      return;\n    } else {\n      this.deleteCase5(node);\n    }\n  }\n\n  deleteCase5(node) {\n    let sibling = this.siblingOf(node);\n\n    if (sibling.color === black) {\n      if (node.parent.left === node && sibling.right.color === black && sibling.left.color === red) {\n        this.rotateRight(sibling.left, true);\n        sibling.insert();\n      } else if (node.parent.right === node && sibling.left.color === black && sibling.right.color === red) {\n        this.rotateLeft(sibling.right, true);\n        sibling.insert();\n      }\n    }\n\n    this.deleteCase6(node);\n  }\n\n  deleteCase6(node) {\n    let sibling = this.siblingOf(node);\n    sibling.color = sibling.parent.color;\n    sibling.parent.color = black;\n\n    if (node.parent.left === node) {\n      sibling.right.color = black;\n      this.rotateLeft(sibling, false);\n      if (!sibling.right.isNull) sibling.right.insert();\n      if (!sibling.left.isNull) sibling.left.insert();\n    } else {\n      sibling.left.color = black;\n      this.rotateRight(sibling, false);\n      if (!sibling.right.isNull) sibling.right.insert();\n      if (!sibling.left.isNull) sibling.left.insert();\n    }\n\n    if (sibling.parent === null) {\n      this.root = sibling;\n    }\n  }\n\n  replaceChild(child, node) {\n    child.parent = node.parent;\n    if (node.parent === null) this.root = child;else {\n      if (node.parent.left === node) {\n        node.parent.left = child;\n      } else {\n        node.parent.right = child;\n      }\n    }\n  } //Tree Traversal\n\n\n  preorder(list, node = this.root) {\n    if (!node.isNull) {\n      list.push(node.value);\n      this.preorder(list, node.left);\n      this.preorder(list, node.right);\n    }\n  }\n\n  inorder(list, node = this.root) {\n    if (!node.isNull) {\n      this.inorder(list, node.left);\n      list.push(node.value);\n      this.inorder(list, node.right);\n    }\n  }\n\n  postorder(list, node = this.root) {\n    if (!node.isNull) {\n      this.postorder(list, node.left);\n      this.postorder(list, node.right);\n      list.push(node.value);\n    }\n  } //Search\n\n\n  search(value, node = this.root) {\n    this.clearHighlight();\n    if (node.isNull) return false;else if (node.value === value) {\n      node.addHighlight();\n      this.highlighted = node;\n      return true;\n    } else if (node.value > value) return this.search(value, node.left);else return this.search(value, node.right);\n  } //Random Tree generator\n\n\n  generateRandomBST(num) {\n    let upper = 0;\n    let lower = num * 2 + 10;\n    let elements = new Set();\n\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n\n      while (elements.has(value)) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n      }\n\n      elements.add(value);\n      this.insert(value);\n    }\n  } //BST Checker\n  //Main Checker function\n\n\n  checkBST() {\n    let BSTTypeList = [];\n\n    if (this.isBalanced()) {\n      BSTTypeList.push('Balanced');\n    }\n\n    if (this.isComplete()) {\n      BSTTypeList.push('Complete');\n    }\n\n    if (this.isPerfect()) {\n      BSTTypeList.push('Perfect');\n    }\n\n    if (this.isFull()) {\n      BSTTypeList.push('Full');\n    }\n\n    return BSTTypeList;\n  } //Subfunctions\n  //balance\n\n\n  isBalanced(node = this.root) {\n    if (node.isNull) return true;\n    let leftH = this.height(node.left);\n    let rightH = this.height(node.right);\n\n    if (Math.abs(leftH - rightH) <= 1) {\n      return this.isBalanced(node.left) && this.isBalanced(node.right);\n    } else {\n      return false;\n    }\n  } //Find height\n\n\n  height(node = this.root) {\n    if (node.isNull) return -1;\n    let ans;\n    ans = this.height(node.left);\n    ans = Math.max(this.height(node.right), ans);\n    return ans + 1;\n  } //complete\n\n\n  isComplete() {\n    let totalNodes = this.countNodes();\n    return this.isComplete2(0, totalNodes);\n  }\n\n  isComplete2(index, totalNodes, node = this.root) {\n    if (node.isNull) return true;else if (index >= totalNodes) return false;else {\n      let ans = this.isComplete2(index * 2 + 1, totalNodes, node.left);\n      ans &= this.isComplete2(index * 2 + 2, totalNodes, node.right);\n      return ans;\n    }\n  } //perfect EDITED\n\n\n  isPerfect() {\n    if (!this.isFull() || !this.isComplete()) return false;\n    return this.isPerfect2();\n  }\n\n  isPerfect2(node = this.root, depth = 0) {\n    if (node.isNull) return true;\n    depth++;\n\n    if (node.right.isNull && node.left.isNull) {\n      if (this.leafDepth !== -1 && this.leafDepth !== depth) return false;\n      this.leafDepth = depth;\n    }\n\n    return this.isPerfect2(node.left, depth) && this.isPerfect2(node.right, depth);\n  } //full\n\n\n  isFull(node = this.root) {\n    if (node.isNull) return true;else if (node.left.isNull && node.right.isNull) return true;else if (!node.left.isNull && !node.right.isNull) {\n      let ans;\n      ans = this.isFull(node.left);\n      ans &= this.isFull(node.right);\n      return ans;\n    } else return false;\n  }\n\n  countNodes(node = this.root) {\n    if (node.isNull) return 0;\n    return this.countNodes(node.left) + 1 + this.countNodes(node.right);\n  } //Clears highlight of previously searched nodes\n\n\n  clearHighlight() {\n    if (this.highlighted) {\n      this.highlighted.clearHighlight();\n      this.highlighted = null;\n    }\n  }\n\n}\n\nexport default RBT;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/redBlack/DataStructure.js"],"names":["React","black","red","NullNode","constructor","color","isNull","parent","html","Node","value","newNullNode","right","left","setHtml","updateRootHtml","insert","addHighlight","clearHighlight","RBT","num","root","generateRandomBST","highlighted","leafDepth","rotateRight","node","toRecolor","rotateLeft","siblingOf","findMin","insertNode","newNode","isLeft","sibling","remove","tempParent","deleteOneChild","smallestRight","child","replaceChild","deleteCase1","deleteCase2","deleteCase3","deleteCase4","deleteCase5","deleteCase6","preorder","list","push","inorder","postorder","search","upper","lower","elements","Set","i","Math","floor","random","has","add","checkBST","BSTTypeList","isBalanced","isComplete","isPerfect","isFull","leftH","height","rightH","abs","ans","max","totalNodes","countNodes","isComplete2","index","isPerfect2","depth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,KAAK,GAAG,CAAZ;AACA,IAAIC,GAAG,GAAG,CAAV;;AAEA,MAAMC,QAAN,CAAe;AACdC,EAAAA,WAAW,GAAG;AACb,SAAKC,KAAL,GAAaJ,KAAb;AACA,SAAKK,MAAL,GAAc,IAAd;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,IAAL,gBACC;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CADD;AAKA;;AAVa;;AAaf,MAAMC,IAAN,CAAW;AACVL,EAAAA,WAAW,CAACM,KAAD,EAAQ;AAClB,QAAIC,WAAW,GAAG,IAAIR,QAAJ,EAAlB;AACAQ,IAAAA,WAAW,CAACJ,MAAZ,GAAqB,IAArB;AACA,SAAKG,KAAL,GAAaA,KAAb;AACA,SAAKL,KAAL,GAAaH,GAAb;AACA,SAAKU,KAAL,GAAaD,WAAb;AACA,SAAKE,IAAL,GAAYF,WAAZ;AACA,SAAKJ,MAAL,GAAc,IAAd;AACA,SAAKD,MAAL,GAAc,KAAd;AAEA,SAAKE,IAAL,gBACC;AAAI,MAAA,GAAG,EAAE,KAAKE,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+B,KAAKA,KAApC,CADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKG,IAAL,CAAUL,IADZ,OACmB,KAAKI,KAAL,CAAWJ,IAD9B,CAFD,CADD;AAQA,GAnBS,CAqBV;;;AACAM,EAAAA,OAAO,GAAG;AACT,QAAIT,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAb,GAAqB,OAAjC;AACA,SAAKG,IAAL,gBACC;AAAI,MAAA,GAAG,EAAE,KAAKE,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAG,UAASL,KAAM,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoC,KAAKK,KAAzC,CADD,eAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKG,IAAL,CAAUL,IADZ,OACmB,KAAKI,KAAL,CAAWJ,IAD9B,CAFD,CADD;AAQA,GAhCS,CAkCV;;;AACAO,EAAAA,cAAc,GAAG;AAChB,QAAI,KAAKR,MAAL,KAAgB,IAApB,EAA0B;AACzB,UAAI,KAAKA,MAAL,CAAYM,IAAZ,KAAqB,IAAzB,EAA+B,KAAKN,MAAL,CAAYS,MAAZ,CAAmB,IAAnB,EAAyB,IAAzB,EAA/B,KACK,KAAKT,MAAL,CAAYS,MAAZ,CAAmB,IAAnB,EAAyB,KAAzB;AACL;AACD,GAxCS,CA0CV;;;AACAA,EAAAA,MAAM,GAAG;AACR,SAAKF,OAAL;AACA,SAAKC,cAAL;AACA,GA9CS,CAgDV;;;AACAE,EAAAA,YAAY,GAAG;AACd,QAAIZ,KAAK,GAAG,KAAKA,KAAL,GAAa,KAAb,GAAqB,OAAjC;AACA,SAAKG,IAAL,gBACC;AAAI,MAAA,GAAG,EAAE,KAAKE,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAG,UAASL,KAAM,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKK,KADP,CADD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKG,IAAL,CAAUL,IADZ,OACmB,KAAKI,KAAL,CAAWJ,IAD9B,CAJD,CADD;AAWA,SAAKO,cAAL;AACA,GA/DS,CAiEV;;;AACAG,EAAAA,cAAc,GAAG;AAChB,SAAKJ,OAAL;AAEA,SAAKC,cAAL;AACA;;AAtES;;AAyEX,MAAMI,GAAN,CAAU;AACTf,EAAAA,WAAW,CAACgB,GAAG,GAAG,CAAP,EAAU;AACpB,QAAIT,WAAW,GAAG,IAAIR,QAAJ,EAAlB;AACA,SAAKkB,IAAL,GAAYV,WAAZ;;AACA,QAAIS,GAAJ,EAAS;AACR,WAAKE,iBAAL,CAAuBF,GAAvB;AACA;;AACD,SAAKG,WAAL,GAAmB,IAAnB;AACA,SAAKC,SAAL,GAAiB,CAAC,CAAlB;AACA,GATQ,CAWT;AACA;;;AACAC,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkB;AAC5B,QAAIpB,MAAM,GAAGmB,IAAI,CAACnB,MAAlB;AACAmB,IAAAA,IAAI,CAACnB,MAAL,GAAcA,MAAM,CAACA,MAArB;;AACA,QAAIA,MAAM,CAACA,MAAP,KAAkB,IAAtB,EAA4B;AAC3B,UAAIA,MAAM,CAACA,MAAP,CAAcM,IAAd,KAAuBN,MAA3B,EAAmC;AAClCA,QAAAA,MAAM,CAACA,MAAP,CAAcM,IAAd,GAAqBa,IAArB;AACA,OAFD,MAEO;AACNnB,QAAAA,MAAM,CAACA,MAAP,CAAcK,KAAd,GAAsBc,IAAtB;AACA;AACD;;AACD,QAAId,KAAK,GAAGc,IAAI,CAACd,KAAjB;AACAc,IAAAA,IAAI,CAACd,KAAL,GAAaL,MAAb;AACAA,IAAAA,MAAM,CAACA,MAAP,GAAgBmB,IAAhB;AACAnB,IAAAA,MAAM,CAACM,IAAP,GAAcD,KAAd;AACAA,IAAAA,KAAK,CAACL,MAAN,GAAeA,MAAf;;AACA,QAAIoB,SAAJ,EAAe;AACdD,MAAAA,IAAI,CAACrB,KAAL,GAAaJ,KAAb;AACAM,MAAAA,MAAM,CAACF,KAAP,GAAeH,GAAf;AACA;AACD,GAhCQ,CAkCT;;;AACA0B,EAAAA,UAAU,CAACF,IAAD,EAAOC,SAAP,EAAkB;AAC3B,QAAIpB,MAAM,GAAGmB,IAAI,CAACnB,MAAlB;AACAmB,IAAAA,IAAI,CAACnB,MAAL,GAAcA,MAAM,CAACA,MAArB;;AACA,QAAIA,MAAM,CAACA,MAAP,KAAkB,IAAtB,EAA4B;AAC3B,UAAIA,MAAM,CAACA,MAAP,CAAcK,KAAd,KAAwBL,MAA5B,EAAoC;AACnCA,QAAAA,MAAM,CAACA,MAAP,CAAcK,KAAd,GAAsBc,IAAtB;AACA,OAFD,MAEO;AACNnB,QAAAA,MAAM,CAACA,MAAP,CAAcM,IAAd,GAAqBa,IAArB;AACA;AACD;;AACD,QAAIb,IAAI,GAAGa,IAAI,CAACb,IAAhB;AACAa,IAAAA,IAAI,CAACb,IAAL,GAAYN,MAAZ;AACAA,IAAAA,MAAM,CAACA,MAAP,GAAgBmB,IAAhB;AACAnB,IAAAA,MAAM,CAACK,KAAP,GAAeC,IAAf;AACAA,IAAAA,IAAI,CAACN,MAAL,GAAcA,MAAd;;AACA,QAAIoB,SAAJ,EAAe;AACdD,MAAAA,IAAI,CAACrB,KAAL,GAAaJ,KAAb;AACAM,MAAAA,MAAM,CAACF,KAAP,GAAeH,GAAf;AACA;AACD,GAtDQ,CAwDT;;;AACA2B,EAAAA,SAAS,CAACH,IAAD,EAAO;AACf,QAAIA,IAAI,CAACnB,MAAL,KAAgB,IAApB,EAA0B,OAAO,IAAP;;AAC1B,QAAImB,IAAI,CAACnB,MAAL,CAAYM,IAAZ,KAAqBa,IAAzB,EAA+B;AAC9B,aAAOA,IAAI,CAACnB,MAAL,CAAYK,KAAnB;AACA,KAFD,MAEO;AACN,aAAOc,IAAI,CAACnB,MAAL,CAAYM,IAAnB;AACA;AACD,GAhEQ,CAkET;;;AACAiB,EAAAA,OAAO,CAACJ,IAAI,GAAG,KAAKL,IAAb,EAAmB;AACzB,QAAIK,IAAI,CAACpB,MAAT,EAAiB;AAChB,aAAOoB,IAAP;AACA,KAFD,MAEO,IAAIA,IAAI,CAACb,IAAL,CAAUP,MAAd,EAAsB;AAC5B,aAAOoB,IAAP;AACA,KAFM,MAEA;AACN,aAAO,KAAKI,OAAL,CAAaJ,IAAI,CAACb,IAAlB,CAAP;AACA;AACD,GA3EQ,CA6ET;;;AACAG,EAAAA,MAAM,CAACN,KAAD,EAAQ;AACb,SAAKW,IAAL,GAAY,KAAKU,UAAL,CAAgB,IAAhB,EAAsB,KAAKV,IAA3B,EAAiCX,KAAjC,CAAZ;AACA,GAhFQ,CAkFT;;;AACAqB,EAAAA,UAAU,CAACxB,MAAD,EAASmB,IAAT,EAAehB,KAAf,EAAsB;AAC/B,QAAIgB,IAAI,CAACpB,MAAT,EAAiB;AAChB,UAAI0B,OAAO,GAAG,IAAIvB,IAAJ,CAASC,KAAT,CAAd;;AACA,UAAIH,MAAM,KAAK,IAAf,EAAqB;AACpByB,QAAAA,OAAO,CAAC3B,KAAR,GAAgBJ,KAAhB;AACA+B,QAAAA,OAAO,CAAChB,MAAR;AACA,eAAOgB,OAAP;AACA,OAJD,MAIO;AACNA,QAAAA,OAAO,CAACzB,MAAR,GAAiBA,MAAjB;AACA,eAAOyB,OAAP;AACA;AACD;;AAED,QAAKN,IAAI,CAAChB,KAAL,KAAeA,KAApB,EAA2B;AAC1B,aAAOgB,IAAP;AACA;;AAED,QAAIO,MAAJ;;AACA,QAAIP,IAAI,CAAChB,KAAL,GAAaA,KAAjB,EAAwB;AACvB,UAAIG,IAAI,GAAG,KAAKkB,UAAL,CAAgBL,IAAhB,EAAsBA,IAAI,CAACb,IAA3B,EAAiCH,KAAjC,CAAX;;AACA,UAAIG,IAAI,KAAKa,IAAI,CAACnB,MAAlB,EAA0B;AACzBmB,QAAAA,IAAI,CAACV,MAAL;AACA,eAAOH,IAAP;AACA;;AACDa,MAAAA,IAAI,CAACb,IAAL,GAAYA,IAAZ;AACAoB,MAAAA,MAAM,GAAG,IAAT;AACA,KARD,MAQO;AACN,UAAIrB,KAAK,GAAG,KAAKmB,UAAL,CAAgBL,IAAhB,EAAsBA,IAAI,CAACd,KAA3B,EAAkCF,KAAlC,CAAZ;;AACA,UAAIE,KAAK,KAAKc,IAAI,CAACnB,MAAnB,EAA2B;AAC1BmB,QAAAA,IAAI,CAACV,MAAL;AACA,eAAOJ,KAAP;AACA;;AACDc,MAAAA,IAAI,CAACd,KAAL,GAAaA,KAAb;AACAqB,MAAAA,MAAM,GAAG,KAAT;AACA;;AAED,QAAIA,MAAJ,EAAY;AACX,UAAIP,IAAI,CAACb,IAAL,CAAUR,KAAV,KAAoBH,GAApB,IAA2BwB,IAAI,CAACrB,KAAL,KAAeH,GAA9C,EAAmD;AAClD,YAAIgC,OAAO,GAAG,KAAKL,SAAL,CAAeH,IAAf,CAAd;;AACA,YAAIQ,OAAO,CAAC7B,KAAR,KAAkBJ,KAAlB,IAA2BiC,OAAO,CAAC5B,MAAvC,EAA+C;AAC9C,cAAIoB,IAAI,CAACnB,MAAL,CAAYM,IAAZ,KAAqBa,IAAzB,EAA+B;AAC9B,iBAAKD,WAAL,CAAiBC,IAAjB,EAAuB,IAAvB;AACA,WAFD,MAEO;AACN,iBAAKD,WAAL,CAAiBC,IAAI,CAACb,IAAtB,EAA4B,KAA5B;AACAa,YAAAA,IAAI,GAAGA,IAAI,CAACnB,MAAZ;AACA,iBAAKqB,UAAL,CAAgBF,IAAhB,EAAsB,IAAtB;AACA;AACD,SARD,MAQO;AACNA,UAAAA,IAAI,CAACrB,KAAL,GAAaJ,KAAb;AACAiC,UAAAA,OAAO,CAAC7B,KAAR,GAAgBJ,KAAhB;;AACA,cAAIyB,IAAI,CAACnB,MAAL,CAAYA,MAAZ,KAAuB,IAA3B,EAAiC;AAChCmB,YAAAA,IAAI,CAACnB,MAAL,CAAYF,KAAZ,GAAoBH,GAApB;AACA;AACD;AACD;AACD,KAnBD,MAmBO;AACN,UAAIwB,IAAI,CAACd,KAAL,CAAWP,KAAX,KAAqBH,GAArB,IAA4BwB,IAAI,CAACrB,KAAL,KAAeH,GAA/C,EAAoD;AACnD,YAAIgC,OAAO,GAAG,KAAKL,SAAL,CAAeH,IAAf,CAAd;;AACA,YAAIQ,OAAO,CAAC7B,KAAR,KAAkBJ,KAAlB,IAA2BiC,OAAO,CAAC5B,MAAvC,EAA+C;AAC9C,cAAIoB,IAAI,CAACnB,MAAL,CAAYK,KAAZ,KAAsBc,IAA1B,EAAgC;AAC/B,iBAAKE,UAAL,CAAgBF,IAAhB,EAAsB,IAAtB;AACA,WAFD,MAEO;AACN,iBAAKE,UAAL,CAAgBF,IAAI,CAACd,KAArB,EAA4B,KAA5B;AACAc,YAAAA,IAAI,GAAGA,IAAI,CAACnB,MAAZ;AACA,iBAAKkB,WAAL,CAAiBC,IAAjB,EAAuB,IAAvB;AACA;AACD,SARD,MAQO;AACNA,UAAAA,IAAI,CAACrB,KAAL,GAAaJ,KAAb;AACAiC,UAAAA,OAAO,CAAC7B,KAAR,GAAgBJ,KAAhB;;AACA,cAAIyB,IAAI,CAACnB,MAAL,CAAYA,MAAZ,KAAuB,IAA3B,EAAiC;AAChCmB,YAAAA,IAAI,CAACnB,MAAL,CAAYF,KAAZ,GAAoBH,GAApB;AACA;AACD;AACD;AACD;;AAED,QAAI,CAACwB,IAAI,CAACb,IAAL,CAAUP,MAAf,EAAuBoB,IAAI,CAACb,IAAL,CAAUG,MAAV;AACvB,QAAI,CAACU,IAAI,CAACd,KAAL,CAAWN,MAAhB,EAAwBoB,IAAI,CAACd,KAAL,CAAWI,MAAX;AAExB,WAAOU,IAAP;AACA,GAnKQ,CAqKT;;;AACAS,EAAAA,MAAM,CAACzB,KAAD,EAAQgB,IAAI,GAAG,KAAKL,IAApB,EAA0B;AAC/B,SAAKH,cAAL;;AACA,QAAIQ,IAAI,CAACpB,MAAT,EAAiB;AAChB;AACA;;AACD,QAAIoB,IAAI,CAAChB,KAAL,KAAeA,KAAnB,EAA0B;AACzB,UAAIgB,IAAI,CAACb,IAAL,CAAUP,MAAV,IAAoBoB,IAAI,CAACd,KAAL,CAAWN,MAAnC,EAA2C;AAC1C,YAAI8B,UAAU,GAAGV,IAAI,CAACnB,MAAtB;AACA,aAAK8B,cAAL,CAAoBX,IAApB;;AACA,YAAIU,UAAJ,EAAgB;AACf,cAAI,CAACA,UAAU,CAACvB,IAAX,CAAgBP,MAArB,EAA6B8B,UAAU,CAACvB,IAAX,CAAgBG,MAAhB;AAC7B,cAAI,CAACoB,UAAU,CAACxB,KAAX,CAAiBN,MAAtB,EAA8B8B,UAAU,CAACxB,KAAX,CAAiBI,MAAjB;AAC9BoB,UAAAA,UAAU,CAACpB,MAAX;AACA,cAAIoB,UAAU,CAAC7B,MAAf,EAAuB6B,UAAU,CAAC7B,MAAX,CAAkBS,MAAlB;AACvB,SALD,MAKO,IAAI,CAAC,KAAKK,IAAL,CAAUf,MAAf,EAAuB,KAAKe,IAAL,CAAUL,MAAV;AAC9B,OATD,MASO;AACN,YAAIsB,aAAa,GAAG,KAAKR,OAAL,CAAaJ,IAAI,CAACd,KAAlB,CAApB;AACAc,QAAAA,IAAI,CAAChB,KAAL,GAAa4B,aAAa,CAAC5B,KAA3B;AACAgB,QAAAA,IAAI,CAACV,MAAL;AACA,aAAKmB,MAAL,CAAYG,aAAa,CAAC5B,KAA1B,EAAiCgB,IAAI,CAACd,KAAtC;AACA;AACD;;AAED,QAAIc,IAAI,CAAChB,KAAL,GAAaA,KAAjB,EAAwB;AACvB,WAAKyB,MAAL,CAAYzB,KAAZ,EAAmBgB,IAAI,CAACb,IAAxB;AACA,KAFD,MAEO;AACN,WAAKsB,MAAL,CAAYzB,KAAZ,EAAmBgB,IAAI,CAACd,KAAxB;AACA;AACD,GAlMQ,CAoMT;;;AACAyB,EAAAA,cAAc,CAACX,IAAD,EAAO;AACpB,QAAIa,KAAJ;;AAEA,QAAIb,IAAI,CAACb,IAAL,CAAUP,MAAd,EAAsB;AACrBiC,MAAAA,KAAK,GAAGb,IAAI,CAACd,KAAb;AACA,KAFD,MAEO;AACN2B,MAAAA,KAAK,GAAGb,IAAI,CAACb,IAAb;AACA;;AACD,SAAK2B,YAAL,CAAkBD,KAAlB,EAAyBb,IAAzB;;AACA,QAAIA,IAAI,CAACrB,KAAL,KAAeJ,KAAnB,EAA0B;AACzB,UAAIsC,KAAK,CAAClC,KAAN,KAAgBH,GAApB,EAAyB;AACxBqC,QAAAA,KAAK,CAAClC,KAAN,GAAcJ,KAAd;AACAsC,QAAAA,KAAK,CAACvB,MAAN;AACA,OAHD,MAGO,KAAKyB,WAAL,CAAiBF,KAAjB;AACP;AACD,GApNQ,CAsNT;;;AACAE,EAAAA,WAAW,CAACf,IAAD,EAAO;AACjB,QAAIA,IAAI,CAACnB,MAAL,KAAgB,IAApB,EAA0B;AACzB,WAAKc,IAAL,GAAYK,IAAZ;AACA,UAAI,CAAC,KAAKL,IAAL,CAAUf,MAAf,EAAuB,KAAKe,IAAL,CAAUL,MAAV;AACvB;AACA;;AACD,SAAK0B,WAAL,CAAiBhB,IAAjB;AACA;;AAEDgB,EAAAA,WAAW,CAAChB,IAAD,EAAO;AACjB,QAAIQ,OAAO,GAAG,KAAKL,SAAL,CAAeH,IAAf,CAAd;;AACA,QAAIQ,OAAO,CAAC7B,KAAR,KAAkBH,GAAtB,EAA2B;AAC1B,UAAIgC,OAAO,CAAC3B,MAAR,CAAeM,IAAf,KAAwBqB,OAA5B,EACC,KAAKT,WAAL,CAAiBS,OAAjB,EAA0B,IAA1B,EADD,KAEK,KAAKN,UAAL,CAAgBM,OAAhB,EAAyB,IAAzB;AACL,UAAIA,OAAO,CAAC3B,MAAR,KAAmB,IAAvB,EAA6B,KAAKc,IAAL,GAAYa,OAAZ;AAC7B;;AACD,SAAKS,WAAL,CAAiBjB,IAAjB;AACA;;AAEDiB,EAAAA,WAAW,CAACjB,IAAD,EAAO;AACjB,QAAIQ,OAAO,GAAG,KAAKL,SAAL,CAAeH,IAAf,CAAd;;AACA,QACCA,IAAI,CAACnB,MAAL,CAAYF,KAAZ,KAAsBJ,KAAtB,IACAiC,OAAO,CAAC7B,KAAR,KAAkBJ,KADlB,IAEAiC,OAAO,CAACrB,IAAR,CAAaR,KAAb,KAAuBJ,KAFvB,IAGAiC,OAAO,CAACtB,KAAR,CAAcP,KAAd,KAAwBJ,KAJzB,EAKE;AACDiC,MAAAA,OAAO,CAAC7B,KAAR,GAAgBH,GAAhB;AACA,WAAKuC,WAAL,CAAiBf,IAAI,CAACnB,MAAtB;AACA,KARD,MAQO;AACN,WAAKqC,WAAL,CAAiBlB,IAAjB;AACA;AACD;;AAEDkB,EAAAA,WAAW,CAAClB,IAAD,EAAO;AACjB,QAAIQ,OAAO,GAAG,KAAKL,SAAL,CAAeH,IAAf,CAAd;;AACA,QACCA,IAAI,CAACnB,MAAL,CAAYF,KAAZ,KAAsBH,GAAtB,IACAgC,OAAO,CAAC7B,KAAR,KAAkBJ,KADlB,IAEAiC,OAAO,CAACrB,IAAR,CAAaR,KAAb,KAAuBJ,KAFvB,IAGAiC,OAAO,CAACtB,KAAR,CAAcP,KAAd,KAAwBJ,KAJzB,EAKE;AACDiC,MAAAA,OAAO,CAAC7B,KAAR,GAAgBH,GAAhB;AACAwB,MAAAA,IAAI,CAACnB,MAAL,CAAYF,KAAZ,GAAoBJ,KAApB;AACA;AACA,KATD,MASO;AACN,WAAK4C,WAAL,CAAiBnB,IAAjB;AACA;AACD;;AAEDmB,EAAAA,WAAW,CAACnB,IAAD,EAAO;AACjB,QAAIQ,OAAO,GAAG,KAAKL,SAAL,CAAeH,IAAf,CAAd;;AACA,QAAIQ,OAAO,CAAC7B,KAAR,KAAkBJ,KAAtB,EAA6B;AAC5B,UACCyB,IAAI,CAACnB,MAAL,CAAYM,IAAZ,KAAqBa,IAArB,IACAQ,OAAO,CAACtB,KAAR,CAAcP,KAAd,KAAwBJ,KADxB,IAEAiC,OAAO,CAACrB,IAAR,CAAaR,KAAb,KAAuBH,GAHxB,EAIE;AACD,aAAKuB,WAAL,CAAiBS,OAAO,CAACrB,IAAzB,EAA+B,IAA/B;AACAqB,QAAAA,OAAO,CAAClB,MAAR;AACA,OAPD,MAOO,IACNU,IAAI,CAACnB,MAAL,CAAYK,KAAZ,KAAsBc,IAAtB,IACAQ,OAAO,CAACrB,IAAR,CAAaR,KAAb,KAAuBJ,KADvB,IAEAiC,OAAO,CAACtB,KAAR,CAAcP,KAAd,KAAwBH,GAHlB,EAIL;AACD,aAAK0B,UAAL,CAAgBM,OAAO,CAACtB,KAAxB,EAA+B,IAA/B;AACAsB,QAAAA,OAAO,CAAClB,MAAR;AACA;AACD;;AACD,SAAK8B,WAAL,CAAiBpB,IAAjB;AACA;;AAEDoB,EAAAA,WAAW,CAACpB,IAAD,EAAO;AACjB,QAAIQ,OAAO,GAAG,KAAKL,SAAL,CAAeH,IAAf,CAAd;AACAQ,IAAAA,OAAO,CAAC7B,KAAR,GAAgB6B,OAAO,CAAC3B,MAAR,CAAeF,KAA/B;AACA6B,IAAAA,OAAO,CAAC3B,MAAR,CAAeF,KAAf,GAAuBJ,KAAvB;;AACA,QAAIyB,IAAI,CAACnB,MAAL,CAAYM,IAAZ,KAAqBa,IAAzB,EAA+B;AAC9BQ,MAAAA,OAAO,CAACtB,KAAR,CAAcP,KAAd,GAAsBJ,KAAtB;AACA,WAAK2B,UAAL,CAAgBM,OAAhB,EAAyB,KAAzB;AACA,UAAI,CAACA,OAAO,CAACtB,KAAR,CAAcN,MAAnB,EAA2B4B,OAAO,CAACtB,KAAR,CAAcI,MAAd;AAC3B,UAAI,CAACkB,OAAO,CAACrB,IAAR,CAAaP,MAAlB,EAA0B4B,OAAO,CAACrB,IAAR,CAAaG,MAAb;AAC1B,KALD,MAKO;AACNkB,MAAAA,OAAO,CAACrB,IAAR,CAAaR,KAAb,GAAqBJ,KAArB;AACA,WAAKwB,WAAL,CAAiBS,OAAjB,EAA0B,KAA1B;AACA,UAAI,CAACA,OAAO,CAACtB,KAAR,CAAcN,MAAnB,EAA2B4B,OAAO,CAACtB,KAAR,CAAcI,MAAd;AAC3B,UAAI,CAACkB,OAAO,CAACrB,IAAR,CAAaP,MAAlB,EAA0B4B,OAAO,CAACrB,IAAR,CAAaG,MAAb;AAC1B;;AACD,QAAIkB,OAAO,CAAC3B,MAAR,KAAmB,IAAvB,EAA6B;AAC5B,WAAKc,IAAL,GAAYa,OAAZ;AACA;AACD;;AAEDM,EAAAA,YAAY,CAACD,KAAD,EAAQb,IAAR,EAAc;AACzBa,IAAAA,KAAK,CAAChC,MAAN,GAAemB,IAAI,CAACnB,MAApB;AACA,QAAImB,IAAI,CAACnB,MAAL,KAAgB,IAApB,EAA0B,KAAKc,IAAL,GAAYkB,KAAZ,CAA1B,KACK;AACJ,UAAIb,IAAI,CAACnB,MAAL,CAAYM,IAAZ,KAAqBa,IAAzB,EAA+B;AAC9BA,QAAAA,IAAI,CAACnB,MAAL,CAAYM,IAAZ,GAAmB0B,KAAnB;AACA,OAFD,MAEO;AACNb,QAAAA,IAAI,CAACnB,MAAL,CAAYK,KAAZ,GAAoB2B,KAApB;AACA;AACD;AACD,GA9TQ,CAgUT;;;AACAQ,EAAAA,QAAQ,CAACC,IAAD,EAAOtB,IAAI,GAAG,KAAKL,IAAnB,EAAyB;AAChC,QAAI,CAACK,IAAI,CAACpB,MAAV,EAAkB;AACjB0C,MAAAA,IAAI,CAACC,IAAL,CAAUvB,IAAI,CAAChB,KAAf;AACA,WAAKqC,QAAL,CAAcC,IAAd,EAAoBtB,IAAI,CAACb,IAAzB;AACA,WAAKkC,QAAL,CAAcC,IAAd,EAAoBtB,IAAI,CAACd,KAAzB;AACA;AACD;;AAEDsC,EAAAA,OAAO,CAACF,IAAD,EAAOtB,IAAI,GAAG,KAAKL,IAAnB,EAAyB;AAC/B,QAAI,CAACK,IAAI,CAACpB,MAAV,EAAkB;AACjB,WAAK4C,OAAL,CAAaF,IAAb,EAAmBtB,IAAI,CAACb,IAAxB;AACAmC,MAAAA,IAAI,CAACC,IAAL,CAAUvB,IAAI,CAAChB,KAAf;AACA,WAAKwC,OAAL,CAAaF,IAAb,EAAmBtB,IAAI,CAACd,KAAxB;AACA;AACD;;AAEDuC,EAAAA,SAAS,CAACH,IAAD,EAAOtB,IAAI,GAAG,KAAKL,IAAnB,EAAyB;AACjC,QAAI,CAACK,IAAI,CAACpB,MAAV,EAAkB;AACjB,WAAK6C,SAAL,CAAeH,IAAf,EAAqBtB,IAAI,CAACb,IAA1B;AACA,WAAKsC,SAAL,CAAeH,IAAf,EAAqBtB,IAAI,CAACd,KAA1B;AACAoC,MAAAA,IAAI,CAACC,IAAL,CAAUvB,IAAI,CAAChB,KAAf;AACA;AACD,GAvVQ,CAyVT;;;AACA0C,EAAAA,MAAM,CAAC1C,KAAD,EAAQgB,IAAI,GAAG,KAAKL,IAApB,EAA0B;AAC/B,SAAKH,cAAL;AAEA,QAAIQ,IAAI,CAACpB,MAAT,EAAiB,OAAO,KAAP,CAAjB,KACK,IAAIoB,IAAI,CAAChB,KAAL,KAAeA,KAAnB,EAA0B;AAC9BgB,MAAAA,IAAI,CAACT,YAAL;AACA,WAAKM,WAAL,GAAmBG,IAAnB;AACA,aAAO,IAAP;AACA,KAJI,MAIE,IAAIA,IAAI,CAAChB,KAAL,GAAaA,KAAjB,EACN,OAAO,KAAK0C,MAAL,CAAY1C,KAAZ,EAAmBgB,IAAI,CAACb,IAAxB,CAAP,CADM,KAEF,OAAO,KAAKuC,MAAL,CAAY1C,KAAZ,EAAmBgB,IAAI,CAACd,KAAxB,CAAP;AACL,GArWQ,CAuWT;;;AACAU,EAAAA,iBAAiB,CAACF,GAAD,EAAM;AACtB,QAAIiC,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAK,GAAGlC,GAAG,GAAG,CAAN,GAAU,EAAtB;AACA,QAAImC,QAAQ,GAAG,IAAIC,GAAJ,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrC,GAApB,EAAyBqC,CAAC,EAA1B,EAA8B;AAC7B,UAAI/C,KAAK,GACRgD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,KAAK,GAAGC,KAAR,GAAgB,CAAjC,CAAX,IAAkDA,KADnD;;AAEA,aAAOC,QAAQ,CAACM,GAAT,CAAanD,KAAb,CAAP,EAA4B;AAC3BA,QAAAA,KAAK,GACJgD,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBP,KAAK,GAAGC,KAAR,GAAgB,CAAjC,CAAX,IAAkDA,KADnD;AAEA;;AACDC,MAAAA,QAAQ,CAACO,GAAT,CAAapD,KAAb;AACA,WAAKM,MAAL,CAAYN,KAAZ;AACA;AACD,GAvXQ,CAyXT;AACA;;;AACAqD,EAAAA,QAAQ,GAAG;AACV,QAAIC,WAAW,GAAG,EAAlB;;AACA,QAAI,KAAKC,UAAL,EAAJ,EAAuB;AACtBD,MAAAA,WAAW,CAACf,IAAZ,CAAiB,UAAjB;AACA;;AACD,QAAI,KAAKiB,UAAL,EAAJ,EAAuB;AACtBF,MAAAA,WAAW,CAACf,IAAZ,CAAiB,UAAjB;AACA;;AACD,QAAI,KAAKkB,SAAL,EAAJ,EAAsB;AACrBH,MAAAA,WAAW,CAACf,IAAZ,CAAiB,SAAjB;AACA;;AACD,QAAI,KAAKmB,MAAL,EAAJ,EAAmB;AAClBJ,MAAAA,WAAW,CAACf,IAAZ,CAAiB,MAAjB;AACA;;AACD,WAAOe,WAAP;AACA,GA1YQ,CA4YT;AACA;;;AACAC,EAAAA,UAAU,CAACvC,IAAI,GAAG,KAAKL,IAAb,EAAmB;AAC5B,QAAIK,IAAI,CAACpB,MAAT,EAAiB,OAAO,IAAP;AACjB,QAAI+D,KAAK,GAAG,KAAKC,MAAL,CAAY5C,IAAI,CAACb,IAAjB,CAAZ;AACA,QAAI0D,MAAM,GAAG,KAAKD,MAAL,CAAY5C,IAAI,CAACd,KAAjB,CAAb;;AACA,QAAI8C,IAAI,CAACc,GAAL,CAASH,KAAK,GAAGE,MAAjB,KAA4B,CAAhC,EAAmC;AAClC,aAAO,KAAKN,UAAL,CAAgBvC,IAAI,CAACb,IAArB,KAA8B,KAAKoD,UAAL,CAAgBvC,IAAI,CAACd,KAArB,CAArC;AACA,KAFD,MAEO;AACN,aAAO,KAAP;AACA;AACD,GAvZQ,CAyZT;;;AACA0D,EAAAA,MAAM,CAAC5C,IAAI,GAAG,KAAKL,IAAb,EAAmB;AACxB,QAAIK,IAAI,CAACpB,MAAT,EAAiB,OAAO,CAAC,CAAR;AACjB,QAAImE,GAAJ;AACAA,IAAAA,GAAG,GAAG,KAAKH,MAAL,CAAY5C,IAAI,CAACb,IAAjB,CAAN;AACA4D,IAAAA,GAAG,GAAGf,IAAI,CAACgB,GAAL,CAAS,KAAKJ,MAAL,CAAY5C,IAAI,CAACd,KAAjB,CAAT,EAAkC6D,GAAlC,CAAN;AACA,WAAOA,GAAG,GAAG,CAAb;AACA,GAhaQ,CAkaT;;;AACAP,EAAAA,UAAU,GAAG;AACZ,QAAIS,UAAU,GAAG,KAAKC,UAAL,EAAjB;AACA,WAAO,KAAKC,WAAL,CAAiB,CAAjB,EAAoBF,UAApB,CAAP;AACA;;AACDE,EAAAA,WAAW,CAACC,KAAD,EAAQH,UAAR,EAAoBjD,IAAI,GAAG,KAAKL,IAAhC,EAAsC;AAChD,QAAIK,IAAI,CAACpB,MAAT,EAAiB,OAAO,IAAP,CAAjB,KACK,IAAIwE,KAAK,IAAIH,UAAb,EAAyB,OAAO,KAAP,CAAzB,KACA;AACJ,UAAIF,GAAG,GAAG,KAAKI,WAAL,CAAiBC,KAAK,GAAG,CAAR,GAAY,CAA7B,EAAgCH,UAAhC,EAA4CjD,IAAI,CAACb,IAAjD,CAAV;AACA4D,MAAAA,GAAG,IAAI,KAAKI,WAAL,CAAiBC,KAAK,GAAG,CAAR,GAAY,CAA7B,EAAgCH,UAAhC,EAA4CjD,IAAI,CAACd,KAAjD,CAAP;AACA,aAAO6D,GAAP;AACA;AACD,GA/aQ,CAibT;;;AACAN,EAAAA,SAAS,GAAG;AACX,QAAI,CAAC,KAAKC,MAAL,EAAD,IAAkB,CAAC,KAAKF,UAAL,EAAvB,EAA0C,OAAO,KAAP;AAC1C,WAAO,KAAKa,UAAL,EAAP;AACA;;AAEDA,EAAAA,UAAU,CAACrD,IAAI,GAAG,KAAKL,IAAb,EAAmB2D,KAAK,GAAG,CAA3B,EAA8B;AACvC,QAAItD,IAAI,CAACpB,MAAT,EAAiB,OAAO,IAAP;AACjB0E,IAAAA,KAAK;;AACL,QAAItD,IAAI,CAACd,KAAL,CAAWN,MAAX,IAAqBoB,IAAI,CAACb,IAAL,CAAUP,MAAnC,EAA2C;AAC1C,UAAI,KAAKkB,SAAL,KAAmB,CAAC,CAApB,IAAyB,KAAKA,SAAL,KAAmBwD,KAAhD,EACC,OAAO,KAAP;AACD,WAAKxD,SAAL,GAAiBwD,KAAjB;AACA;;AACD,WACC,KAAKD,UAAL,CAAgBrD,IAAI,CAACb,IAArB,EAA2BmE,KAA3B,KACA,KAAKD,UAAL,CAAgBrD,IAAI,CAACd,KAArB,EAA4BoE,KAA5B,CAFD;AAIA,GAncQ,CAqcT;;;AACAZ,EAAAA,MAAM,CAAC1C,IAAI,GAAG,KAAKL,IAAb,EAAmB;AACxB,QAAIK,IAAI,CAACpB,MAAT,EAAiB,OAAO,IAAP,CAAjB,KACK,IAAIoB,IAAI,CAACb,IAAL,CAAUP,MAAV,IAAoBoB,IAAI,CAACd,KAAL,CAAWN,MAAnC,EAA2C,OAAO,IAAP,CAA3C,KACA,IAAI,CAACoB,IAAI,CAACb,IAAL,CAAUP,MAAX,IAAqB,CAACoB,IAAI,CAACd,KAAL,CAAWN,MAArC,EAA6C;AACjD,UAAImE,GAAJ;AACAA,MAAAA,GAAG,GAAG,KAAKL,MAAL,CAAY1C,IAAI,CAACb,IAAjB,CAAN;AACA4D,MAAAA,GAAG,IAAI,KAAKL,MAAL,CAAY1C,IAAI,CAACd,KAAjB,CAAP;AACA,aAAO6D,GAAP;AACA,KALI,MAKE,OAAO,KAAP;AACP;;AAEDG,EAAAA,UAAU,CAAClD,IAAI,GAAG,KAAKL,IAAb,EAAmB;AAC5B,QAAIK,IAAI,CAACpB,MAAT,EAAiB,OAAO,CAAP;AACjB,WACC,KAAKsE,UAAL,CAAgBlD,IAAI,CAACb,IAArB,IAA6B,CAA7B,GAAiC,KAAK+D,UAAL,CAAgBlD,IAAI,CAACd,KAArB,CADlC;AAGA,GAtdQ,CAwdT;;;AACAM,EAAAA,cAAc,GAAG;AAChB,QAAI,KAAKK,WAAT,EAAsB;AACrB,WAAKA,WAAL,CAAiBL,cAAjB;AACA,WAAKK,WAAL,GAAmB,IAAnB;AACA;AACD;;AA9dQ;;AAieV,eAAeJ,GAAf","sourcesContent":["import React from 'react'\r\n\r\nvar black = 0\r\nvar red = 1\r\n\r\nclass NullNode {\r\n\tconstructor() {\r\n\t\tthis.color = black\r\n\t\tthis.isNull = true\r\n\t\tthis.parent = null\r\n\t\tthis.html = (\r\n\t\t\t<li className=\"null\">\r\n\t\t\t\t<div className={`null black`}>null</div>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nclass Node {\r\n\tconstructor(value) {\r\n\t\tlet newNullNode = new NullNode()\r\n\t\tnewNullNode.parent = this\r\n\t\tthis.value = value\r\n\t\tthis.color = red\r\n\t\tthis.right = newNullNode\r\n\t\tthis.left = newNullNode\r\n\t\tthis.parent = null\r\n\t\tthis.isNull = false\r\n\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className={`normal red`}>{this.value}</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.left.html} {this.right.html}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\t//Updating html of a node\r\n\tsetHtml() {\r\n\t\tlet color = this.color ? 'red' : 'black'\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className={`normal ${color}`}>{this.value}</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.left.html} {this.right.html}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\t//Updating html of the whole tree\r\n\tupdateRootHtml() {\r\n\t\tif (this.parent !== null) {\r\n\t\t\tif (this.parent.left === this) this.parent.insert(this, true)\r\n\t\t\telse this.parent.insert(this, false)\r\n\t\t}\r\n\t}\r\n\r\n\t//Inserting new node to tree\r\n\tinsert() {\r\n\t\tthis.setHtml()\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Adds Highlight to node html\r\n\taddHighlight() {\r\n\t\tlet color = this.color ? 'red' : 'black'\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className={`normal ${color} highlight`}>\r\n\t\t\t\t\t{this.value}\r\n\t\t\t\t</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.left.html} {this.right.html}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Clears Highlight of the node html\r\n\tclearHighlight() {\r\n\t\tthis.setHtml()\r\n\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n}\r\n\r\nclass RBT {\r\n\tconstructor(num = 0) {\r\n\t\tlet newNullNode = new NullNode()\r\n\t\tthis.root = newNullNode\r\n\t\tif (num) {\r\n\t\t\tthis.generateRandomBST(num)\r\n\t\t}\r\n\t\tthis.highlighted = null\r\n\t\tthis.leafDepth = -1\r\n\t}\r\n\r\n\t//Helper functions\r\n\t//Rotate right\r\n\trotateRight(node, toRecolor) {\r\n\t\tlet parent = node.parent\r\n\t\tnode.parent = parent.parent\r\n\t\tif (parent.parent !== null) {\r\n\t\t\tif (parent.parent.left === parent) {\r\n\t\t\t\tparent.parent.left = node\r\n\t\t\t} else {\r\n\t\t\t\tparent.parent.right = node\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet right = node.right\r\n\t\tnode.right = parent\r\n\t\tparent.parent = node\r\n\t\tparent.left = right\r\n\t\tright.parent = parent\r\n\t\tif (toRecolor) {\r\n\t\t\tnode.color = black\r\n\t\t\tparent.color = red\r\n\t\t}\r\n\t}\r\n\r\n\t//Rotate left\r\n\trotateLeft(node, toRecolor) {\r\n\t\tlet parent = node.parent\r\n\t\tnode.parent = parent.parent\r\n\t\tif (parent.parent !== null) {\r\n\t\t\tif (parent.parent.right === parent) {\r\n\t\t\t\tparent.parent.right = node\r\n\t\t\t} else {\r\n\t\t\t\tparent.parent.left = node\r\n\t\t\t}\r\n\t\t}\r\n\t\tlet left = node.left\r\n\t\tnode.left = parent\r\n\t\tparent.parent = node\r\n\t\tparent.right = left\r\n\t\tleft.parent = parent\r\n\t\tif (toRecolor) {\r\n\t\t\tnode.color = black\r\n\t\t\tparent.color = red\r\n\t\t}\r\n\t}\r\n\r\n\t//Find sibling\r\n\tsiblingOf(node) {\r\n\t\tif (node.parent === null) return null\r\n\t\tif (node.parent.left === node) {\r\n\t\t\treturn node.parent.right\r\n\t\t} else {\r\n\t\t\treturn node.parent.left\r\n\t\t}\r\n\t}\r\n\r\n\t//Finding min value\r\n\tfindMin(node = this.root) {\r\n\t\tif (node.isNull) {\r\n\t\t\treturn node\r\n\t\t} else if (node.left.isNull) {\r\n\t\t\treturn node\r\n\t\t} else {\r\n\t\t\treturn this.findMin(node.left)\r\n\t\t}\r\n\t}\r\n\r\n\t//Insert\r\n\tinsert(value) {\r\n\t\tthis.root = this.insertNode(null, this.root, value)\r\n\t}\r\n\r\n\t//Insert helper function\r\n\tinsertNode(parent, node, value) {\r\n\t\tif (node.isNull) {\r\n\t\t\tlet newNode = new Node(value)\r\n\t\t\tif (parent === null) {\r\n\t\t\t\tnewNode.color = black\r\n\t\t\t\tnewNode.insert()\r\n\t\t\t\treturn newNode\r\n\t\t\t} else {\r\n\t\t\t\tnewNode.parent = parent\r\n\t\t\t\treturn newNode\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif ( node.value === value) {\r\n\t\t\treturn node\r\n\t\t}\r\n\r\n\t\tlet isLeft\r\n\t\tif (node.value > value) {\r\n\t\t\tlet left = this.insertNode(node, node.left, value)\r\n\t\t\tif (left === node.parent) {\r\n\t\t\t\tnode.insert()\r\n\t\t\t\treturn left\r\n\t\t\t}\r\n\t\t\tnode.left = left\r\n\t\t\tisLeft = true\r\n\t\t} else {\r\n\t\t\tlet right = this.insertNode(node, node.right, value)\r\n\t\t\tif (right === node.parent) {\r\n\t\t\t\tnode.insert()\r\n\t\t\t\treturn right\r\n\t\t\t}\r\n\t\t\tnode.right = right\r\n\t\t\tisLeft = false\r\n\t\t}\r\n\r\n\t\tif (isLeft) {\r\n\t\t\tif (node.left.color === red && node.color === red) {\r\n\t\t\t\tlet sibling = this.siblingOf(node)\r\n\t\t\t\tif (sibling.color === black || sibling.isNull) {\r\n\t\t\t\t\tif (node.parent.left === node) {\r\n\t\t\t\t\t\tthis.rotateRight(node, true)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.rotateRight(node.left, false)\r\n\t\t\t\t\t\tnode = node.parent\r\n\t\t\t\t\t\tthis.rotateLeft(node, true)\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.color = black\r\n\t\t\t\t\tsibling.color = black\r\n\t\t\t\t\tif (node.parent.parent !== null) {\r\n\t\t\t\t\t\tnode.parent.color = red\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (node.right.color === red && node.color === red) {\r\n\t\t\t\tlet sibling = this.siblingOf(node)\r\n\t\t\t\tif (sibling.color === black || sibling.isNull) {\r\n\t\t\t\t\tif (node.parent.right === node) {\r\n\t\t\t\t\t\tthis.rotateLeft(node, true)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.rotateLeft(node.right, false)\r\n\t\t\t\t\t\tnode = node.parent\r\n\t\t\t\t\t\tthis.rotateRight(node, true)\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnode.color = black\r\n\t\t\t\t\tsibling.color = black\r\n\t\t\t\t\tif (node.parent.parent !== null) {\r\n\t\t\t\t\t\tnode.parent.color = red\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!node.left.isNull) node.left.insert()\r\n\t\tif (!node.right.isNull) node.right.insert()\r\n\r\n\t\treturn node\r\n\t}\r\n\r\n\t//Delete Node\r\n\tremove(value, node = this.root) {\r\n\t\tthis.clearHighlight()\r\n\t\tif (node.isNull) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (node.value === value) {\r\n\t\t\tif (node.left.isNull || node.right.isNull) {\r\n\t\t\t\tlet tempParent = node.parent\r\n\t\t\t\tthis.deleteOneChild(node)\r\n\t\t\t\tif (tempParent) {\r\n\t\t\t\t\tif (!tempParent.left.isNull) tempParent.left.insert()\r\n\t\t\t\t\tif (!tempParent.right.isNull) tempParent.right.insert()\r\n\t\t\t\t\ttempParent.insert()\r\n\t\t\t\t\tif (tempParent.parent) tempParent.parent.insert()\r\n\t\t\t\t} else if (!this.root.isNull) this.root.insert()\r\n\t\t\t} else {\r\n\t\t\t\tlet smallestRight = this.findMin(node.right)\r\n\t\t\t\tnode.value = smallestRight.value\r\n\t\t\t\tnode.insert()\r\n\t\t\t\tthis.remove(smallestRight.value, node.right)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (node.value > value) {\r\n\t\t\tthis.remove(value, node.left)\r\n\t\t} else {\r\n\t\t\tthis.remove(value, node.right)\r\n\t\t}\r\n\t}\r\n\r\n\t//Delete helper functions\r\n\tdeleteOneChild(node) {\r\n\t\tlet child\r\n\r\n\t\tif (node.left.isNull) {\r\n\t\t\tchild = node.right\r\n\t\t} else {\r\n\t\t\tchild = node.left\r\n\t\t}\r\n\t\tthis.replaceChild(child, node)\r\n\t\tif (node.color === black) {\r\n\t\t\tif (child.color === red) {\r\n\t\t\t\tchild.color = black\r\n\t\t\t\tchild.insert()\r\n\t\t\t} else this.deleteCase1(child)\r\n\t\t}\r\n\t}\r\n\r\n\t//All cases\r\n\tdeleteCase1(node) {\r\n\t\tif (node.parent === null) {\r\n\t\t\tthis.root = node\r\n\t\t\tif (!this.root.isNull) this.root.insert()\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.deleteCase2(node)\r\n\t}\r\n\r\n\tdeleteCase2(node) {\r\n\t\tlet sibling = this.siblingOf(node)\r\n\t\tif (sibling.color === red) {\r\n\t\t\tif (sibling.parent.left === sibling)\r\n\t\t\t\tthis.rotateRight(sibling, true)\r\n\t\t\telse this.rotateLeft(sibling, true)\r\n\t\t\tif (sibling.parent === null) this.root = sibling\r\n\t\t}\r\n\t\tthis.deleteCase3(node)\r\n\t}\r\n\r\n\tdeleteCase3(node) {\r\n\t\tlet sibling = this.siblingOf(node)\r\n\t\tif (\r\n\t\t\tnode.parent.color === black &&\r\n\t\t\tsibling.color === black &&\r\n\t\t\tsibling.left.color === black &&\r\n\t\t\tsibling.right.color === black\r\n\t\t) {\r\n\t\t\tsibling.color = red\r\n\t\t\tthis.deleteCase1(node.parent)\r\n\t\t} else {\r\n\t\t\tthis.deleteCase4(node)\r\n\t\t}\r\n\t}\r\n\r\n\tdeleteCase4(node) {\r\n\t\tlet sibling = this.siblingOf(node)\r\n\t\tif (\r\n\t\t\tnode.parent.color === red &&\r\n\t\t\tsibling.color === black &&\r\n\t\t\tsibling.left.color === black &&\r\n\t\t\tsibling.right.color === black\r\n\t\t) {\r\n\t\t\tsibling.color = red\r\n\t\t\tnode.parent.color = black\r\n\t\t\treturn\r\n\t\t} else {\r\n\t\t\tthis.deleteCase5(node)\r\n\t\t}\r\n\t}\r\n\r\n\tdeleteCase5(node) {\r\n\t\tlet sibling = this.siblingOf(node)\r\n\t\tif (sibling.color === black) {\r\n\t\t\tif (\r\n\t\t\t\tnode.parent.left === node &&\r\n\t\t\t\tsibling.right.color === black &&\r\n\t\t\t\tsibling.left.color === red\r\n\t\t\t) {\r\n\t\t\t\tthis.rotateRight(sibling.left, true)\r\n\t\t\t\tsibling.insert()\r\n\t\t\t} else if (\r\n\t\t\t\tnode.parent.right === node &&\r\n\t\t\t\tsibling.left.color === black &&\r\n\t\t\t\tsibling.right.color === red\r\n\t\t\t) {\r\n\t\t\t\tthis.rotateLeft(sibling.right, true)\r\n\t\t\t\tsibling.insert()\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.deleteCase6(node)\r\n\t}\r\n\r\n\tdeleteCase6(node) {\r\n\t\tlet sibling = this.siblingOf(node)\r\n\t\tsibling.color = sibling.parent.color\r\n\t\tsibling.parent.color = black\r\n\t\tif (node.parent.left === node) {\r\n\t\t\tsibling.right.color = black\r\n\t\t\tthis.rotateLeft(sibling, false)\r\n\t\t\tif (!sibling.right.isNull) sibling.right.insert()\r\n\t\t\tif (!sibling.left.isNull) sibling.left.insert()\r\n\t\t} else {\r\n\t\t\tsibling.left.color = black\r\n\t\t\tthis.rotateRight(sibling, false)\r\n\t\t\tif (!sibling.right.isNull) sibling.right.insert()\r\n\t\t\tif (!sibling.left.isNull) sibling.left.insert()\r\n\t\t}\r\n\t\tif (sibling.parent === null) {\r\n\t\t\tthis.root = sibling\r\n\t\t}\r\n\t}\r\n\r\n\treplaceChild(child, node) {\r\n\t\tchild.parent = node.parent\r\n\t\tif (node.parent === null) this.root = child\r\n\t\telse {\r\n\t\t\tif (node.parent.left === node) {\r\n\t\t\t\tnode.parent.left = child\r\n\t\t\t} else {\r\n\t\t\t\tnode.parent.right = child\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//Tree Traversal\r\n\tpreorder(list, node = this.root) {\r\n\t\tif (!node.isNull) {\r\n\t\t\tlist.push(node.value)\r\n\t\t\tthis.preorder(list, node.left)\r\n\t\t\tthis.preorder(list, node.right)\r\n\t\t}\r\n\t}\r\n\r\n\tinorder(list, node = this.root) {\r\n\t\tif (!node.isNull) {\r\n\t\t\tthis.inorder(list, node.left)\r\n\t\t\tlist.push(node.value)\r\n\t\t\tthis.inorder(list, node.right)\r\n\t\t}\r\n\t}\r\n\r\n\tpostorder(list, node = this.root) {\r\n\t\tif (!node.isNull) {\r\n\t\t\tthis.postorder(list, node.left)\r\n\t\t\tthis.postorder(list, node.right)\r\n\t\t\tlist.push(node.value)\r\n\t\t}\r\n\t}\r\n\r\n\t//Search\r\n\tsearch(value, node = this.root) {\r\n\t\tthis.clearHighlight()\r\n\r\n\t\tif (node.isNull) return false\r\n\t\telse if (node.value === value) {\r\n\t\t\tnode.addHighlight()\r\n\t\t\tthis.highlighted = node\r\n\t\t\treturn true\r\n\t\t} else if (node.value > value)\r\n\t\t\treturn this.search(value, node.left)\r\n\t\telse return this.search(value, node.right)\r\n\t}\r\n\r\n\t//Random Tree generator\r\n\tgenerateRandomBST(num) {\r\n\t\tlet upper = 0\r\n\t\tlet lower = num * 2 + 10\r\n\t\tlet elements = new Set()\r\n\r\n\t\tfor (let i = 0; i < num; i++) {\r\n\t\t\tlet value =\r\n\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\twhile (elements.has(value)) {\r\n\t\t\t\tvalue =\r\n\t\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\t}\r\n\t\t\telements.add(value)\r\n\t\t\tthis.insert(value)\r\n\t\t}\r\n\t}\r\n\r\n\t//BST Checker\r\n\t//Main Checker function\r\n\tcheckBST() {\r\n\t\tlet BSTTypeList = []\r\n\t\tif (this.isBalanced()) {\r\n\t\t\tBSTTypeList.push('Balanced')\r\n\t\t}\r\n\t\tif (this.isComplete()) {\r\n\t\t\tBSTTypeList.push('Complete')\r\n\t\t}\r\n\t\tif (this.isPerfect()) {\r\n\t\t\tBSTTypeList.push('Perfect')\r\n\t\t}\r\n\t\tif (this.isFull()) {\r\n\t\t\tBSTTypeList.push('Full')\r\n\t\t}\r\n\t\treturn BSTTypeList\r\n\t}\r\n\r\n\t//Subfunctions\r\n\t//balance\r\n\tisBalanced(node = this.root) {\r\n\t\tif (node.isNull) return true\r\n\t\tlet leftH = this.height(node.left)\r\n\t\tlet rightH = this.height(node.right)\r\n\t\tif (Math.abs(leftH - rightH) <= 1) {\r\n\t\t\treturn this.isBalanced(node.left) && this.isBalanced(node.right)\r\n\t\t} else {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\t//Find height\r\n\theight(node = this.root) {\r\n\t\tif (node.isNull) return -1\r\n\t\tlet ans\r\n\t\tans = this.height(node.left)\r\n\t\tans = Math.max(this.height(node.right), ans)\r\n\t\treturn ans + 1\r\n\t}\r\n\r\n\t//complete\r\n\tisComplete() {\r\n\t\tlet totalNodes = this.countNodes()\r\n\t\treturn this.isComplete2(0, totalNodes)\r\n\t}\r\n\tisComplete2(index, totalNodes, node = this.root) {\r\n\t\tif (node.isNull) return true\r\n\t\telse if (index >= totalNodes) return false\r\n\t\telse {\r\n\t\t\tlet ans = this.isComplete2(index * 2 + 1, totalNodes, node.left)\r\n\t\t\tans &= this.isComplete2(index * 2 + 2, totalNodes, node.right)\r\n\t\t\treturn ans\r\n\t\t}\r\n\t}\r\n\r\n\t//perfect EDITED\r\n\tisPerfect() {\r\n\t\tif (!this.isFull() || !this.isComplete()) return false\r\n\t\treturn this.isPerfect2()\r\n\t}\r\n\r\n\tisPerfect2(node = this.root, depth = 0) {\r\n\t\tif (node.isNull) return true\r\n\t\tdepth++\r\n\t\tif (node.right.isNull && node.left.isNull) {\r\n\t\t\tif (this.leafDepth !== -1 && this.leafDepth !== depth)\r\n\t\t\t\treturn false\r\n\t\t\tthis.leafDepth = depth\r\n\t\t}\r\n\t\treturn (\r\n\t\t\tthis.isPerfect2(node.left, depth) &&\r\n\t\t\tthis.isPerfect2(node.right, depth)\r\n\t\t)\r\n\t}\r\n\r\n\t//full\r\n\tisFull(node = this.root) {\r\n\t\tif (node.isNull) return true\r\n\t\telse if (node.left.isNull && node.right.isNull) return true\r\n\t\telse if (!node.left.isNull && !node.right.isNull) {\r\n\t\t\tlet ans\r\n\t\t\tans = this.isFull(node.left)\r\n\t\t\tans &= this.isFull(node.right)\r\n\t\t\treturn ans\r\n\t\t} else return false\r\n\t}\r\n\r\n\tcountNodes(node = this.root) {\r\n\t\tif (node.isNull) return 0\r\n\t\treturn (\r\n\t\t\tthis.countNodes(node.left) + 1 + this.countNodes(node.right)\r\n\t\t)\r\n\t}\r\n\r\n\t//Clears highlight of previously searched nodes\r\n\tclearHighlight() {\r\n\t\tif (this.highlighted) {\r\n\t\t\tthis.highlighted.clearHighlight()\r\n\t\t\tthis.highlighted = null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default RBT\r\n"]},"metadata":{},"sourceType":"module"}