{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\trie\\\\TrieMain.js\";\nimport React, { useState, useEffect } from 'react';\nimport Trie from './DataStructureN';\nimport TrieMenu from './TrieMenu';\nimport TriePopup from './TriePopup';\nimport useDelError from '../../hooks/useDelError';\nimport { Icon } from '@iconify/react';\nimport questionMarkCircleOutline from '@iconify/icons-eva/question-mark-circle-outline';\nimport usePopup from '../../hooks/usePopup';\n\nfunction TrieMain(props) {\n  //hooks\n  const [trie, setTrie] = useState(null);\n  const [trieHtml, setTrieHtml] = useState(null);\n  const [words, setWords] = useState([]);\n  const [wordNotFound, setWordNotFound] = useDelError(trieHtml);\n  const [popup, togglePopup] = usePopup(); //OnMount Behaviour\n\n  useEffect(() => {\n    let tempTrie = new Trie();\n    setTrie(tempTrie);\n    setTrieHtml(tempTrie.root.html);\n    return () => {\n      setTrie(null);\n      setTrieHtml(null);\n    };\n  }, []); //Insert\n\n  const insert = word => {\n    let tempTrie = trie;\n    tempTrie.insert(word);\n    setTrie(tempTrie);\n    setTrieHtml(tempTrie.root.html);\n    listAll();\n  }; //Remove\n\n\n  const remove = word => {\n    let tempTrie = trie;\n    if (!tempTrie.searchWord(word)) setWordNotFound(true);else setWordNotFound(false);\n    tempTrie.deleteWord(word);\n    setTrie(tempTrie);\n    setTrieHtml(tempTrie.root.html);\n    listAll();\n  }; //Search\n\n\n  const search = word => {\n    let tempTrie = trie;\n    tempTrie.realTimeSearch(word);\n    setTrie(tempTrie);\n    setTrieHtml(tempTrie.root.html);\n  }; //Generates random Trie with num words\n\n\n  const random = num => {\n    num = parseInt(num);\n    let tempTrie = new Trie(num);\n    setTrie(tempTrie);\n    setTrieHtml(tempTrie.root.html);\n    listAll(tempTrie); // setWordNotFound(false)\n  }; //Listing all words in the trie\n\n\n  const listAll = (tempTrie = trie) => {\n    let tempWords = tempTrie.findAllWords();\n    setWords(tempWords);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, \"Trie\", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"i\",\n    onClick: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: questionMarkCircleOutline,\n    width: \"25px\",\n    height: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.selector('menu'),\n    className: \"main-menu-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, \"Home\")), /*#__PURE__*/React.createElement(TrieMenu, {\n    insert: insert,\n    search: search,\n    remove: remove,\n    random: random,\n    delError: wordNotFound ? 'error' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bstlist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 4\n    }\n  }, words.length ? /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 6\n    }\n  }, words.map((word, i) => /*#__PURE__*/React.createElement(\"li\", {\n    key: i,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 8\n    }\n  }, word))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 6\n    }\n  }, \"Trie is Empty\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, trieHtml)), popup ? /*#__PURE__*/React.createElement(TriePopup, {\n    toggle: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }) : null);\n}\n\nexport default TrieMain;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/trie/TrieMain.js"],"names":["React","useState","useEffect","Trie","TrieMenu","TriePopup","useDelError","Icon","questionMarkCircleOutline","usePopup","TrieMain","props","trie","setTrie","trieHtml","setTrieHtml","words","setWords","wordNotFound","setWordNotFound","popup","togglePopup","tempTrie","root","html","insert","word","listAll","remove","searchWord","deleteWord","search","realTimeSearch","random","num","parseInt","tempWords","findAllWords","selector","length","map","i"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport Trie from './DataStructureN'\r\nimport TrieMenu from './TrieMenu'\r\nimport TriePopup from './TriePopup'\r\nimport useDelError from '../../hooks/useDelError'\r\nimport { Icon } from '@iconify/react'\r\nimport questionMarkCircleOutline from '@iconify/icons-eva/question-mark-circle-outline'\r\nimport usePopup from '../../hooks/usePopup'\r\n\r\nfunction TrieMain(props) {\r\n\t//hooks\r\n\tconst [trie, setTrie] = useState(null)\r\n\tconst [trieHtml, setTrieHtml] = useState(null)\r\n\tconst [words, setWords] = useState([])\r\n\tconst [wordNotFound, setWordNotFound] = useDelError(trieHtml)\r\n\tconst [popup, togglePopup] = usePopup()\r\n\r\n\t//OnMount Behaviour\r\n\tuseEffect(() => {\r\n\t\tlet tempTrie = new Trie()\r\n\t\tsetTrie(tempTrie)\r\n\t\tsetTrieHtml(tempTrie.root.html)\r\n\t\treturn () => {\r\n\t\t\tsetTrie(null)\r\n\t\t\tsetTrieHtml(null)\r\n\t\t}\r\n\t}, [])\r\n\r\n\t//Insert\r\n\tconst insert = word => {\r\n\t\tlet tempTrie = trie\r\n\t\ttempTrie.insert(word)\r\n\t\tsetTrie(tempTrie)\r\n\t\tsetTrieHtml(tempTrie.root.html)\r\n\t\tlistAll()\r\n\t}\r\n\r\n\t//Remove\r\n\tconst remove = word => {\r\n\t\tlet tempTrie = trie\r\n\r\n\t\tif (!tempTrie.searchWord(word)) setWordNotFound(true)\r\n\t\telse setWordNotFound(false)\r\n\r\n\t\ttempTrie.deleteWord(word)\r\n\t\tsetTrie(tempTrie)\r\n\t\tsetTrieHtml(tempTrie.root.html)\r\n\t\tlistAll()\r\n\t}\r\n\r\n\t//Search\r\n\tconst search = word => {\r\n\t\tlet tempTrie = trie\r\n\r\n\t\ttempTrie.realTimeSearch(word)\r\n\t\tsetTrie(tempTrie)\r\n\t\tsetTrieHtml(tempTrie.root.html)\r\n\t}\r\n\r\n\t//Generates random Trie with num words\r\n\tconst random = num => {\r\n\t\tnum = parseInt(num)\r\n\t\tlet tempTrie = new Trie(num)\r\n\t\tsetTrie(tempTrie)\r\n\t\tsetTrieHtml(tempTrie.root.html)\r\n\t\tlistAll(tempTrie)\r\n\t\t// setWordNotFound(false)\r\n\t}\r\n\r\n\t//Listing all words in the trie\r\n\tconst listAll = (tempTrie = trie) => {\r\n\t\tlet tempWords = tempTrie.findAllWords()\r\n\t\tsetWords(tempWords)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<header>\r\n\t\t\t\t<h1 className=\"heading\">\r\n\t\t\t\t\tTrie\r\n\t\t\t\t\t<button className=\"i\" onClick={togglePopup}>\r\n\t\t\t\t\t\t<Icon\r\n\t\t\t\t\t\t\ticon={questionMarkCircleOutline}\r\n\t\t\t\t\t\t\twidth=\"25px\"\r\n\t\t\t\t\t\t\theight=\"25px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</h1>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={() => props.selector('menu')}\r\n\t\t\t\t\tclassName=\"main-menu-button\"\r\n\t\t\t\t>\r\n\t\t\t\t\tHome\r\n\t\t\t\t</button>\r\n\t\t\t</header>\r\n\t\t\t<TrieMenu\r\n\t\t\t\tinsert={insert}\r\n\t\t\t\tsearch={search}\r\n\t\t\t\tremove={remove}\r\n\t\t\t\trandom={random}\r\n\t\t\t\tdelError={wordNotFound ? 'error' : ''}\r\n\t\t\t/>\r\n\t\t\t<div className=\"bstlist\">\r\n\t\t\t\t{words.length ? (\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{words.map((word, i) => (\r\n\t\t\t\t\t\t\t<li key={i}>{word}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<p>Trie is Empty</p>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"tree\">\r\n\t\t\t\t<ul>{trieHtml}</ul>\r\n\t\t\t</div>\r\n\t\t\t{popup ? <TriePopup toggle={togglePopup} /> : null}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TrieMain\r\n"]},"metadata":{},"sourceType":"module"}