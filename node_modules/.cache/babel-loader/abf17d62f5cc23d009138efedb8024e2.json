{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\bst\\\\DataStructure.js\";\nimport React from 'react';\nexport class Node {\n  constructor(value) {\n    this.value = value;\n    this.left = null;\n    this.right = null;\n    this.parent = null;\n    this.htmlLeft = /*#__PURE__*/React.createElement(\"li\", {\n      className: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 5\n      }\n    }, \"null\"));\n    this.htmlRight = /*#__PURE__*/React.createElement(\"li\", {\n      className: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }\n    }, \"null\"));\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }\n    }, this.value), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 5\n      }\n    }, this.htmlLeft, \" \", this.htmlRight));\n  } //Inserts a node in HTML\n\n\n  insert(node, isLeft) {\n    const newHtml = node.html;\n\n    if (isLeft) {\n      this.htmlLeft = newHtml;\n    } else {\n      this.htmlRight = newHtml;\n    }\n\n    this.setHtml();\n    this.updateRootHtml();\n  } //Updates HTML for the node\n\n\n  setHtml() {\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 5\n      }\n    }, this.value), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, this.htmlLeft, \" \", this.htmlRight));\n  } //Updates the whole HTML\n\n\n  updateRootHtml() {\n    if (this.parent !== null) {\n      if (this.parent.left === this) this.parent.insert(this, true);else this.parent.insert(this, false);\n    }\n  } //Sets one child to null\n\n\n  setChildToNull(isLeft) {\n    if (isLeft) {\n      this.htmlLeft = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 6\n        }\n      }, \"null\"));\n    } else {\n      this.htmlRight = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 6\n        }\n      }, \"null\"));\n    }\n\n    this.setHtml();\n    this.updateRootHtml();\n  } //Sets grandchild to child\n\n\n  setChildToChildsChild(isLeftChild, isLeft) {\n    if (isLeftChild) {\n      if (isLeft) {\n        this.htmlLeft = this.left.left.html;\n        this.setHtml();\n      } else {\n        this.htmlLeft = this.left.right.html;\n        this.setHtml();\n      }\n    } else {\n      if (isLeft) {\n        this.htmlRight = this.right.left.html;\n        this.setHtml();\n      } else {\n        this.htmlRight = this.right.right.html;\n        this.setHtml();\n      }\n    }\n\n    this.updateRootHtml();\n  } //Removes a node from HTML\n\n\n  remove(childrenCondtion) {\n    if (!this.parent) return;\n\n    if (!childrenCondtion) {\n      if (this.parent.left === this) {\n        this.parent.setChildToNull(true);\n      } else {\n        this.parent.setChildToNull(false);\n      }\n    } else if (childrenCondtion === 'left') {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, true);\n      } else {\n        this.parent.setChildToChildsChild(false, true);\n      }\n    } else {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, false);\n      } else {\n        this.parent.setChildToChildsChild(false, false);\n      }\n    }\n  } //Updates the value of a node\n\n\n  updateValue(value) {\n    this.value = value;\n    this.setHtml();\n    this.updateRootHtml();\n  } //Adds highlight to a node when searched\n\n\n  addHighlight() {\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"normal highlight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 5\n      }\n    }, this.value), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 5\n      }\n    }, this.htmlLeft, \" \", this.htmlRight));\n    this.updateRootHtml();\n  } //Removes the highlight\n\n\n  clearHighlight() {\n    this.setHtml();\n    this.updateRootHtml();\n  } //Changes the html when tree is balanced\n\n\n  balanceHtml() {\n    if (!this.left && this.right) {\n      this.htmlRight = this.right.html;\n      this.setChildToNull(true);\n    } else if (!this.right && this.left) {\n      this.htmlLeft = this.left.html;\n      this.setChildToNull(false);\n    } else if (this.right && this.left) {\n      this.htmlLeft = this.left.html;\n      this.htmlRight = this.right.html;\n      this.setHtml();\n      this.updateRootHtml();\n    } else {\n      this.htmlLeft = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 6\n        }\n      }, \"null\"));\n      this.htmlRight = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 6\n        }\n      }, \"null\"));\n      this.setHtml();\n      this.updateRootHtml();\n    }\n  }\n\n}\n\nclass BST {\n  constructor(num = 0) {\n    this.root = null;\n\n    if (num) {\n      this.generateRandomBST(num);\n    }\n\n    this.highlighted = null;\n    this.leafDepth = -1;\n  } //inserting a new node\n\n\n  insert(value) {\n    this.clearHighlight();\n    var newNode = new Node(value);\n\n    if (this.root === null) {\n      this.root = newNode;\n    } else this.insertNode(this.root, newNode);\n  }\n\n  insertNode(node, newNode) {\n    if (newNode.value < node.value) {\n      if (node.left === null) {\n        node.left = newNode;\n        newNode.parent = node;\n        node.insert(newNode, true);\n      } else this.insertNode(node.left, newNode);\n    } else {\n      if (node.right === null) {\n        node.right = newNode;\n        newNode.parent = node;\n        node.insert(newNode, false);\n      } else this.insertNode(node.right, newNode);\n    }\n  } //Finding max value\n\n\n  findMax(node = this.root) {\n    if (node == null) return node;else if (node.right == null) {\n      return node;\n    } else {\n      return this.findMax(node.right);\n    }\n  } //Finding min value\n\n\n  findMin(node = this.root) {\n    if (node == null) return node;else if (node.left == null) {\n      return node;\n    } else {\n      return this.findMin(node.left);\n    }\n  } //Deleting node\n\n\n  remove(value) {\n    this.clearHighlight();\n    this.root = this.removeNode(this.root, value);\n  }\n\n  removeNode(node, value) {\n    if (node === null) return null;else if (value < node.value) {\n      node.left = this.removeNode(node.left, value);\n      return node;\n    } else if (value > node.value) {\n      node.right = this.removeNode(node.right, value);\n      return node;\n    } else {\n      if (node.left === null && node.right === null) {\n        node.remove(null);\n        node = null;\n        return node;\n      }\n\n      if (node.left === null) {\n        node.remove('right');\n        node.right.parent = node.parent;\n        node = node.right;\n        return node;\n      } else if (node.right === null) {\n        node.remove('left');\n        node.left.parent = node.parent;\n        node = node.left;\n        return node;\n      }\n\n      var minNodeOfRight = this.findMin(node.right);\n      node.updateValue(minNodeOfRight.value);\n      node.right = this.removeNode(node.right, minNodeOfRight.value);\n      return node;\n    }\n  } //Find height\n\n\n  height(node = this.root) {\n    if (node === null) return -1;\n    let ans;\n    ans = this.height(node.left);\n    ans = Math.max(this.height(node.right), ans);\n    return ans + 1;\n  } //Count number of nodes\n\n\n  countNodes(node = this.root) {\n    if (node === null) return 0;\n    return this.countNodes(node.left) + 1 + this.countNodes(node.right);\n  } //BST traversal\n\n\n  preorder(list, node = this.root) {\n    if (node !== null) {\n      list.push(node.value);\n      this.preorder(list, node.left);\n      this.preorder(list, node.right);\n    }\n  }\n\n  inorder(list, node = this.root) {\n    if (node !== null) {\n      this.inorder(list, node.left);\n      list.push(node.value);\n      this.inorder(list, node.right);\n    }\n  }\n\n  postorder(list, node = this.root) {\n    if (node !== null) {\n      this.postorder(list, node.left);\n      this.postorder(list, node.right);\n      list.push(node.value);\n    }\n  } //Search\n\n\n  search(value, node = this.root) {\n    this.clearHighlight();\n    if (node === null) return false;else if (node.value === value) {\n      node.addHighlight();\n      this.highlighted = node;\n      return true;\n    } else if (node.value > value) return this.search(value, node.left);else return this.search(value, node.right);\n  } //Subfunctions\n  //balance\n\n\n  isBalanced(node = this.root) {\n    if (node === null) return true;\n    let leftH = this.height(node.left);\n    let rightH = this.height(node.right);\n\n    if (Math.abs(leftH - rightH) <= 1) {\n      return this.isBalanced(node.left) && this.isBalanced(node.right);\n    } else {\n      return false;\n    }\n  } //complete\n\n\n  isComplete() {\n    let totalNodes = this.countNodes();\n    return this.isComplete2(0, totalNodes);\n  }\n\n  isComplete2(index, totalNodes, node = this.root) {\n    if (node === null) return true;else if (index >= totalNodes) return false;else {\n      let ans = this.isComplete2(index * 2 + 1, totalNodes, node.left);\n      ans &= this.isComplete2(index * 2 + 2, totalNodes, node.right);\n      return ans;\n    }\n  } //perfect\n\n\n  isPerfect() {\n    if (!this.isFull() || !this.isComplete()) return false;\n    return this.isPerfect2();\n  }\n\n  isPerfect2(node = this.root, depth = 0) {\n    if (!node) return true;\n    depth++;\n\n    if (!node.right && !node.left) {\n      if (this.leafDepth !== -1 && this.leafDepth !== depth) return false;\n      this.leafDepth = depth;\n    }\n\n    return this.isPerfect2(node.left, depth) && this.isPerfect2(node.right, depth);\n  } //full\n\n\n  isFull(node = this.root) {\n    if (node === null) return true;else if (node.left === null && node.right === null) return true;else if (node.left !== null && node.right !== null) {\n      let ans;\n      ans = this.isFull(node.left);\n      ans &= this.isFull(node.right);\n      return ans;\n    } else return false;\n  } //Balancing BST\n\n\n  balance(node = this.root) {\n    this.clearHighlight();\n    let nodes = [];\n    this.BSTToArr(node, nodes);\n    let l = nodes.length;\n    this.root = null;\n    this.makeBST(nodes, 0, l - 1);\n  } //Balancing sub functions\n\n\n  BSTToArr(node, nodes) {\n    if (node !== null) {\n      this.BSTToArr(node.left, nodes);\n      nodes.push(node);\n      this.BSTToArr(node.right, nodes);\n    }\n  } //making BST from array\n\n\n  makeBST(nodes, start, end) {\n    if (start > end) {\n      return;\n    }\n\n    let mid = Math.floor((start + end) / 2);\n    this.insert(nodes[mid].value);\n    this.makeBST(nodes, start, mid - 1);\n    this.makeBST(nodes, mid + 1, end);\n  }\n\n  clearHighlight() {\n    if (this.highlighted) {\n      this.highlighted.clearHighlight();\n      this.highlighted = null;\n    }\n  }\n\n}\n\nexport default BST;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/bst/DataStructure.js"],"names":["React","Node","constructor","value","left","right","parent","htmlLeft","htmlRight","html","insert","node","isLeft","newHtml","setHtml","updateRootHtml","setChildToNull","setChildToChildsChild","isLeftChild","remove","childrenCondtion","updateValue","addHighlight","clearHighlight","balanceHtml","BST","num","root","generateRandomBST","highlighted","leafDepth","newNode","insertNode","findMax","findMin","removeNode","minNodeOfRight","height","ans","Math","max","countNodes","preorder","list","push","inorder","postorder","search","isBalanced","leftH","rightH","abs","isComplete","totalNodes","isComplete2","index","isPerfect","isFull","isPerfect2","depth","balance","nodes","BSTToArr","l","length","makeBST","start","end","mid","floor"],"mappings":"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","sourcesContent":["import React from 'react'\r\nexport class Node {\r\n\tconstructor(value) {\r\n\t\tthis.value = value\r\n\t\tthis.left = null\r\n\t\tthis.right = null\r\n\t\tthis.parent = null\r\n\t\tthis.htmlLeft = (\r\n\t\t\t<li className=\"null\">\r\n\t\t\t\t<div>null</div>\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tthis.htmlRight = (\r\n\t\t\t<li className=\"null\">\r\n\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className=\"normal\">{this.value}</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.htmlLeft} {this.htmlRight}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\t//Inserts a node in HTML\r\n\tinsert(node, isLeft) {\r\n\t\tconst newHtml = node.html\r\n\r\n\t\tif (isLeft) {\r\n\t\t\tthis.htmlLeft = newHtml\r\n\t\t} else {\r\n\t\t\tthis.htmlRight = newHtml\r\n\t\t}\r\n\t\tthis.setHtml()\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Updates HTML for the node\r\n\tsetHtml() {\r\n\t\tthis.html = (\r\n\t\t\t<li>\r\n\t\t\t\t<div className=\"normal\">{this.value}</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.htmlLeft} {this.htmlRight}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\r\n\t//Updates the whole HTML\r\n\tupdateRootHtml() {\r\n\t\tif (this.parent !== null) {\r\n\t\t\tif (this.parent.left === this) this.parent.insert(this, true)\r\n\t\t\telse this.parent.insert(this, false)\r\n\t\t}\r\n\t}\r\n\r\n\t//Sets one child to null\r\n\tsetChildToNull(isLeft) {\r\n\t\tif (isLeft) {\r\n\t\t\tthis.htmlLeft = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div>null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\tthis.htmlRight = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div>null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setHtml()\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Sets grandchild to child\r\n\tsetChildToChildsChild(isLeftChild, isLeft) {\r\n\t\tif (isLeftChild) {\r\n\t\t\tif (isLeft) {\r\n\t\t\t\tthis.htmlLeft = this.left.left.html\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t} else {\r\n\t\t\t\tthis.htmlLeft = this.left.right.html\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isLeft) {\r\n\t\t\t\tthis.htmlRight = this.right.left.html\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t} else {\r\n\t\t\t\tthis.htmlRight = this.right.right.html\r\n\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Removes a node from HTML\r\n\tremove(childrenCondtion) {\r\n\t\tif (!this.parent) return\r\n\t\tif (!childrenCondtion) {\r\n\t\t\tif (this.parent.left === this) {\r\n\t\t\t\tthis.parent.setChildToNull(true)\r\n\t\t\t} else {\r\n\t\t\t\tthis.parent.setChildToNull(false)\r\n\t\t\t}\r\n\t\t} else if (childrenCondtion === 'left') {\r\n\t\t\tif (this.parent.left === this) {\r\n\t\t\t\tthis.parent.setChildToChildsChild(true, true)\r\n\t\t\t} else {\r\n\t\t\t\tthis.parent.setChildToChildsChild(false, true)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.parent.left === this) {\r\n\t\t\t\tthis.parent.setChildToChildsChild(true, false)\r\n\t\t\t} else {\r\n\t\t\t\tthis.parent.setChildToChildsChild(false, false)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//Updates the value of a node\r\n\tupdateValue(value) {\r\n\t\tthis.value = value\r\n\t\tthis.setHtml()\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Adds highlight to a node when searched\r\n\taddHighlight() {\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className=\"normal highlight\">{this.value}</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.htmlLeft} {this.htmlRight}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Removes the highlight\r\n\tclearHighlight() {\r\n\t\tthis.setHtml()\r\n\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Changes the html when tree is balanced\r\n\tbalanceHtml() {\r\n\t\tif (!this.left && this.right) {\r\n\t\t\tthis.htmlRight = this.right.html\r\n\t\t\tthis.setChildToNull(true)\r\n\t\t} else if (!this.right && this.left) {\r\n\t\t\tthis.htmlLeft = this.left.html\r\n\t\t\tthis.setChildToNull(false)\r\n\t\t} else if (this.right && this.left) {\r\n\t\t\tthis.htmlLeft = this.left.html\r\n\t\t\tthis.htmlRight = this.right.html\r\n\t\t\tthis.setHtml()\r\n\t\t\tthis.updateRootHtml()\r\n\t\t} else {\r\n\t\t\tthis.htmlLeft = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div>null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\r\n\t\t\tthis.htmlRight = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t\tthis.setHtml()\r\n\t\t\tthis.updateRootHtml()\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass BST {\r\n\tconstructor(num = 0) {\r\n\t\tthis.root = null\r\n\t\tif (num) {\r\n\t\t\tthis.generateRandomBST(num)\r\n\t\t}\r\n\t\tthis.highlighted = null\r\n\t\tthis.leafDepth = -1\r\n\t}\r\n\r\n\t//inserting a new node\r\n\tinsert(value) {\r\n\t\tthis.clearHighlight()\r\n\t\tvar newNode = new Node(value)\r\n\t\tif (this.root === null) {\r\n\t\t\tthis.root = newNode\r\n\t\t} else this.insertNode(this.root, newNode)\r\n\t}\r\n\r\n\tinsertNode(node, newNode) {\r\n\t\tif (newNode.value < node.value) {\r\n\t\t\tif (node.left === null) {\r\n\t\t\t\tnode.left = newNode\r\n\t\t\t\tnewNode.parent = node\r\n\t\t\t\tnode.insert(newNode, true)\r\n\t\t\t} else this.insertNode(node.left, newNode)\r\n\t\t} else {\r\n\t\t\tif (node.right === null) {\r\n\t\t\t\tnode.right = newNode\r\n\t\t\t\tnewNode.parent = node\r\n\t\t\t\tnode.insert(newNode, false)\r\n\t\t\t} else this.insertNode(node.right, newNode)\r\n\t\t}\r\n\t}\r\n\r\n\t//Finding max value\r\n\tfindMax(node = this.root) {\r\n\t\tif (node == null) return node\r\n\t\telse if (node.right == null) {\r\n\t\t\treturn node\r\n\t\t} else {\r\n\t\t\treturn this.findMax(node.right)\r\n\t\t}\r\n\t}\r\n\r\n\t//Finding min value\r\n\tfindMin(node = this.root) {\r\n\t\tif (node == null) return node\r\n\t\telse if (node.left == null) {\r\n\t\t\treturn node\r\n\t\t} else {\r\n\t\t\treturn this.findMin(node.left)\r\n\t\t}\r\n\t}\r\n\r\n\t//Deleting node\r\n\tremove(value) {\r\n\t\tthis.clearHighlight()\r\n\t\tthis.root = this.removeNode(this.root, value)\r\n\t}\r\n\r\n\tremoveNode(node, value) {\r\n\t\tif (node === null) return null\r\n\t\telse if (value < node.value) {\r\n\t\t\tnode.left = this.removeNode(node.left, value)\r\n\t\t\treturn node\r\n\t\t} else if (value > node.value) {\r\n\t\t\tnode.right = this.removeNode(node.right, value)\r\n\t\t\treturn node\r\n\t\t} else {\r\n\t\t\tif (node.left === null && node.right === null) {\r\n\t\t\t\tnode.remove(null)\r\n\t\t\t\tnode = null\r\n\t\t\t\treturn node\r\n\t\t\t}\r\n\t\t\tif (node.left === null) {\r\n\t\t\t\tnode.remove('right')\r\n\t\t\t\tnode.right.parent = node.parent\r\n\t\t\t\tnode = node.right\r\n\t\t\t\treturn node\r\n\t\t\t} else if (node.right === null) {\r\n\t\t\t\tnode.remove('left')\r\n\t\t\t\tnode.left.parent = node.parent\r\n\t\t\t\tnode = node.left\r\n\t\t\t\treturn node\r\n\t\t\t}\r\n\t\t\tvar minNodeOfRight = this.findMin(node.right)\r\n\t\t\tnode.updateValue(minNodeOfRight.value)\r\n\r\n\t\t\tnode.right = this.removeNode(node.right, minNodeOfRight.value)\r\n\t\t\treturn node\r\n\t\t}\r\n\t}\r\n\r\n\t//Find height\r\n\theight(node = this.root) {\r\n\t\tif (node === null) return -1\r\n\t\tlet ans\r\n\t\tans = this.height(node.left)\r\n\t\tans = Math.max(this.height(node.right), ans)\r\n\t\treturn ans + 1\r\n\t}\r\n\r\n\t//Count number of nodes\r\n\tcountNodes(node = this.root) {\r\n\t\tif (node === null) return 0\r\n\t\treturn (\r\n\t\t\tthis.countNodes(node.left) + 1 + this.countNodes(node.right)\r\n\t\t)\r\n\t}\r\n\r\n\t//BST traversal\r\n\tpreorder(list, node = this.root) {\r\n\t\tif (node !== null) {\r\n\t\t\tlist.push(node.value)\r\n\t\t\tthis.preorder(list, node.left)\r\n\t\t\tthis.preorder(list, node.right)\r\n\t\t}\r\n\t}\r\n\r\n\tinorder(list, node = this.root) {\r\n\t\tif (node !== null) {\r\n\t\t\tthis.inorder(list, node.left)\r\n\t\t\tlist.push(node.value)\r\n\t\t\tthis.inorder(list, node.right)\r\n\t\t}\r\n\t}\r\n\r\n\tpostorder(list, node = this.root) {\r\n\t\tif (node !== null) {\r\n\t\t\tthis.postorder(list, node.left)\r\n\t\t\tthis.postorder(list, node.right)\r\n\t\t\tlist.push(node.value)\r\n\t\t}\r\n\t}\r\n\r\n\t//Search\r\n\tsearch(value, node = this.root) {\r\n\t\tthis.clearHighlight()\r\n\r\n\t\tif (node === null) return false\r\n\t\telse if (node.value === value) {\r\n\t\t\tnode.addHighlight()\r\n\t\t\tthis.highlighted = node\r\n\t\t\treturn true\r\n\t\t} else if (node.value > value)\r\n\t\t\treturn this.search(value, node.left)\r\n\t\telse return this.search(value, node.right)\r\n\t}\r\n\r\n\r\n\r\n\t//Subfunctions\r\n\t//balance\r\n\tisBalanced(node = this.root) {\r\n\t\tif (node === null) return true\r\n\t\tlet leftH = this.height(node.left)\r\n\t\tlet rightH = this.height(node.right)\r\n\t\tif (Math.abs(leftH - rightH) <= 1) {\r\n\t\t\treturn this.isBalanced(node.left) && this.isBalanced(node.right)\r\n\t\t} else {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\t//complete\r\n\tisComplete() {\r\n\t\tlet totalNodes = this.countNodes()\r\n\t\treturn this.isComplete2(0, totalNodes)\r\n\t}\r\n\tisComplete2(index, totalNodes, node = this.root) {\r\n\t\tif (node === null) return true\r\n\t\telse if (index >= totalNodes) return false\r\n\t\telse {\r\n\t\t\tlet ans = this.isComplete2(index * 2 + 1, totalNodes, node.left)\r\n\t\t\tans &= this.isComplete2(index * 2 + 2, totalNodes, node.right)\r\n\t\t\treturn ans\r\n\t\t}\r\n\t}\r\n\r\n\t//perfect\r\n\tisPerfect() {\r\n\t\tif (!this.isFull() || !this.isComplete()) return false\r\n\t\treturn this.isPerfect2()\r\n\t}\r\n\r\n\tisPerfect2(node = this.root, depth = 0) {\r\n\t\tif (!node) return true\r\n\t\tdepth++\r\n\t\tif (!node.right && !node.left) {\r\n\t\t\tif (this.leafDepth !== -1 && this.leafDepth !== depth)\r\n\t\t\t\treturn false\r\n\t\t\tthis.leafDepth = depth\r\n\t\t}\r\n\t\treturn (\r\n\t\t\tthis.isPerfect2(node.left, depth) &&\r\n\t\t\tthis.isPerfect2(node.right, depth)\r\n\t\t)\r\n\t}\r\n\r\n\t//full\r\n\tisFull(node = this.root) {\r\n\t\tif (node === null) return true\r\n\t\telse if (node.left === null && node.right === null) return true\r\n\t\telse if (node.left !== null && node.right !== null) {\r\n\t\t\tlet ans\r\n\t\t\tans = this.isFull(node.left)\r\n\t\t\tans &= this.isFull(node.right)\r\n\t\t\treturn ans\r\n\t\t} else return false\r\n\t}\r\n\r\n\t//Balancing BST\r\n\tbalance(node = this.root) {\r\n\t\tthis.clearHighlight()\r\n\t\tlet nodes = []\r\n\t\tthis.BSTToArr(node, nodes)\r\n\t\tlet l = nodes.length\r\n\t\tthis.root = null\r\n\t\tthis.makeBST(nodes, 0, l - 1)\r\n\t}\r\n\r\n\t//Balancing sub functions\r\n\tBSTToArr(node, nodes) {\r\n\t\tif (node !== null) {\r\n\t\t\tthis.BSTToArr(node.left, nodes)\r\n\t\t\tnodes.push(node)\r\n\t\t\tthis.BSTToArr(node.right, nodes)\r\n\t\t}\r\n\t}\r\n\r\n\t//making BST from array\r\n\tmakeBST(nodes, start, end) {\r\n\t\tif (start > end) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tlet mid = Math.floor((start + end) / 2)\r\n\t\tthis.insert(nodes[mid].value)\r\n\t\tthis.makeBST(nodes, start, mid - 1)\r\n\t\tthis.makeBST(nodes, mid + 1, end)\r\n\t}\r\n\r\n\tclearHighlight() {\r\n\t\tif (this.highlighted) {\r\n\t\t\tthis.highlighted.clearHighlight()\r\n\t\t\tthis.highlighted = null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default BST\r\n"]},"metadata":{},"sourceType":"module"}