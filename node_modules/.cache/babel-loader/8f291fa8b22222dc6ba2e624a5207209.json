{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\avl\\\\DataStructure.js\";\nimport React from 'react';\n\nclass Node {\n  constructor(value) {\n    this.height = 0;\n    this.value = value;\n    this.left = null;\n    this.right = null;\n    this.parent = null;\n    this.htmlLeft = /*#__PURE__*/React.createElement(\"li\", {\n      className: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 5\n      }\n    }, \"null\"));\n    this.htmlRight = /*#__PURE__*/React.createElement(\"li\", {\n      className: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"null\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }, \"null\"));\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }\n    }, this.value, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      className: \"height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 19\n      }\n    }, this.height)), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 5\n      }\n    }, this.htmlLeft, \" \", this.htmlRight));\n  } //Inserting html of a new node\n\n\n  insert(node, isLeft) {\n    const newHtml = node.html;\n\n    if (isLeft) {\n      this.htmlLeft = newHtml;\n    } else {\n      this.htmlRight = newHtml;\n    }\n\n    this.setHtml();\n    this.updateRootHtml();\n  } //Updating html of a node\n\n\n  setHtml() {\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }\n    }, this.value, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      className: \"height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 19\n      }\n    }, this.height)), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 5\n      }\n    }, this.htmlLeft, \" \", this.htmlRight));\n  } //Updating html of the whole tree\n\n\n  updateRootHtml() {\n    if (this.parent !== null) {\n      if (this.parent.left === this) this.parent.insert(this, true);else this.parent.insert(this, false);\n    }\n  } //Changing a child to null\n\n\n  setChildToNull(isLeft) {\n    if (isLeft) {\n      this.htmlLeft = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 6\n        }\n      }, \"null\"));\n    } else {\n      this.htmlRight = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 6\n        }\n      }, \"null\"));\n    }\n\n    this.setHtml();\n    this.updateRootHtml();\n  } //interchanging a child with a grandchild\n\n\n  setChildToChildsChild(isLeftChild, isLeft) {\n    if (isLeftChild) {\n      if (isLeft) {\n        this.htmlLeft = this.left.left.html;\n        this.setHtml();\n      } else {\n        this.htmlLeft = this.left.right.html;\n        this.setHtml();\n      }\n    } else {\n      if (isLeft) {\n        this.htmlRight = this.right.left.html;\n        this.setHtml();\n      } else {\n        this.htmlRight = this.right.right.html;\n        this.setHtml();\n      }\n    }\n\n    this.updateRootHtml();\n  } //Removing html of a deleted node\n\n\n  remove(childrenCondtion) {\n    if (!this.parent) return;\n\n    if (!childrenCondtion) {\n      if (this.parent.left === this) {\n        this.parent.setChildToNull(true);\n      } else {\n        this.parent.setChildToNull(false);\n      }\n    } else if (childrenCondtion === 'left') {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, true);\n      } else {\n        this.parent.setChildToChildsChild(false, true);\n      }\n    } else {\n      if (this.parent.left === this) {\n        this.parent.setChildToChildsChild(true, false);\n      } else {\n        this.parent.setChildToChildsChild(false, false);\n      }\n    }\n  } //Updates value of a node html\n\n\n  updateValue(value) {\n    this.value = value;\n    this.setHtml();\n    this.updateRootHtml();\n  } //Adds Highlight to node html\n\n\n  addHighlight() {\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"normal highlight\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }\n    }, this.value, \" \", /*#__PURE__*/React.createElement(\"p\", {\n      className: \"height\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 19\n      }\n    }, this.height)), /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }\n    }, this.htmlLeft, \" \", this.htmlRight));\n    this.updateRootHtml();\n  } //Clears Highlight of the node html\n\n\n  clearHighlight() {\n    this.setHtml();\n    this.updateRootHtml();\n  } //Updating html after balancing\n\n\n  balanceHtml() {\n    if (!this.left && this.right) {\n      this.right.balanceHtml();\n      this.htmlRight = this.right.html;\n      this.setChildToNull(true);\n    } else if (!this.right && this.left) {\n      this.left.balanceHtml();\n      this.htmlLeft = this.left.html;\n      this.setChildToNull(false);\n    } else if (this.right && this.left) {\n      this.left.balanceHtml();\n      this.right.balanceHtml();\n      this.htmlLeft = this.left.html;\n      this.htmlRight = this.right.html;\n      this.setHtml();\n      this.updateRootHtml();\n    } else {\n      this.htmlLeft = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 6\n        }\n      }, \"null\"));\n      this.htmlRight = /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 6\n        }\n      }, \"null\"));\n      this.setHtml();\n      this.updateRootHtml();\n    }\n  }\n\n}\n\nclass AVL {\n  constructor(num = 0) {\n    this.root = null;\n\n    if (num) {\n      this.generateRandomBST(num);\n    }\n\n    this.highlighted = null;\n    this.leafDepth = -1;\n  } //Helper functions\n\n\n  rotateRight(node) {\n    let tempNode = node.left;\n    if (node.left.right) node.left.right.parent = node;\n    node.left = node.left.right; //For Handling HTML\n\n    tempNode.parent = node.parent;\n    node.parent = tempNode; //For Handling HTML END\n\n    tempNode.right = node;\n    tempNode.height = this.setHeight(tempNode);\n    node.height = this.setHeight(node);\n    return tempNode;\n  }\n\n  rotateLeft(node) {\n    let tempNode = node.right;\n    if (node.right.left) node.right.left.parent = node;\n    node.right = node.right.left; //For Handling HTML\n\n    tempNode.parent = node.parent;\n    node.parent = tempNode; //For Handling HTML END\n\n    tempNode.left = node; // tempNode.left\n\n    tempNode.height = this.setHeight(tempNode);\n    node.height = this.setHeight(node);\n    return tempNode;\n  } //Sets hight of a node\n\n\n  setHeight(node) {\n    if (node === null) return -1;\n    let leftHeight = node.left !== null ? node.left.height : -1;\n    let rightHeight = node.right !== null ? node.right.height : -1;\n    return Math.max(leftHeight, rightHeight) + 1;\n  } //Checks if a sub tree is balanced\n\n\n  balanceCheck(node) {\n    if (node === null) return 0;\n    let leftHeight = node.left !== null ? node.left.height : -1;\n    let rightHeight = node.right !== null ? node.right.height : -1;\n    return leftHeight - rightHeight;\n  } //Balances the Tree\n\n\n  balance(node) {\n    let balance = this.balanceCheck(node);\n\n    if (balance > 1) {\n      if (this.setHeight(node.left.left) > this.setHeight(node.left.right)) {\n        node = this.rotateRight(node);\n      } else {\n        node.left = this.rotateLeft(node.left);\n        node = this.rotateRight(node);\n      }\n    } else if (balance < -1) {\n      if (this.setHeight(node.right.right) > this.setHeight(node.right.left)) {\n        node = this.rotateLeft(node);\n      } else {\n        node.right = this.rotateRight(node.right);\n        node = this.rotateLeft(node);\n      }\n    }\n\n    if (node !== null) node.height = this.setHeight(node);\n    if (node && node.right) node.right.balanceHtml();\n    if (node && node.left) node.left.balanceHtml();\n    return node;\n  }\n\n  findMax(node = this.root) {\n    if (node == null) {\n      return node;\n    } else if (node.right == null) {\n      return node;\n    } else {\n      return this.findMax(node.right);\n    }\n  }\n\n  findMin(node = this.root) {\n    if (node == null) {\n      return node;\n    } else if (node.left == null) {\n      return node;\n    } else {\n      return this.findMin(node.left);\n    }\n  } //inserting a new node\n\n\n  insert(value) {\n    this.clearHighlight();\n    var newNode = new Node(value);\n    if (this.root === null) this.root = newNode;else this.root = this.insertNode(this.root, newNode);\n  }\n\n  insertNode(node, newNode) {\n    if (newNode.value < node.value) {\n      if (node.left === null) {\n        node.left = newNode;\n        newNode.parent = node;\n        node.insert(newNode, true);\n      } else node.left = this.insertNode(node.left, newNode);\n    } else {\n      if (node.right === null) {\n        node.right = newNode;\n        newNode.parent = node;\n        node.insert(newNode, false);\n      } else node.right = this.insertNode(node.right, newNode);\n    }\n\n    node = this.balance(node);\n    return node;\n  } //Deleting node\n\n\n  remove(value) {\n    this.clearHighlight();\n    this.root = this.removeNode(this.root, value);\n  }\n\n  removeNode(node, value) {\n    if (node === null || typeof node === 'undefined') return null;else if (value < node.value) {\n      node.left = this.removeNode(node.left, value); // return node\n    } else if (value > node.value) {\n      node.right = this.removeNode(node.right, value); // return node\n    } else {\n      if (node.left === null && node.right === null) {\n        node.remove(null);\n        node = null; // return node\n      } else if (node.left === null) {\n        node.remove('right');\n        node.right.parent = node.parent;\n        node = node.right; // return node\n      } else if (node.right === null) {\n        node.remove('left');\n        node.left.parent = node.parent;\n        node = node.left; // return node\n      } else {\n        var minNodeOfRight = this.findMin(node.right);\n        node.updateValue(minNodeOfRight.value);\n        node.right = this.removeNode(node.right, minNodeOfRight.value);\n      }\n    }\n    node = this.balance(node);\n    return node;\n  } //Tree Traversal\n\n\n  preorder(list, node = this.root) {\n    if (node !== null) {\n      list.push(node.value);\n      this.preorder(list, node.left);\n      this.preorder(list, node.right);\n    }\n  }\n\n  inorder(list, node = this.root) {\n    if (node !== null) {\n      this.inorder(list, node.left);\n      list.push(node.value);\n      this.inorder(list, node.right);\n    }\n  }\n\n  postorder(list, node = this.root) {\n    if (node !== null) {\n      this.postorder(list, node.left);\n      this.postorder(list, node.right);\n      list.push(node.value);\n    }\n  } //Search\n\n\n  search(value, node = this.root) {\n    this.clearHighlight();\n    if (node === null) return false;else if (node.value === value) {\n      node.addHighlight();\n      this.highlighted = node;\n      return true;\n    } else if (node.value > value) return this.search(value, node.left);else return this.search(value, node.right);\n  } //Random Tree generator\n\n\n  generateRandomBST(num) {\n    let upper = 0;\n    let lower = num * 2 + 10;\n    let elements = new Set();\n\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n\n      while (elements.has(value)) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n      }\n\n      elements.add(value);\n      this.insert(value);\n    }\n  } //BST Checker\n  //Main Checker function\n\n\n  checkBST() {\n    let BSTTypeList = [];\n\n    if (this.isBalanced()) {\n      BSTTypeList.push('Balanced');\n    }\n\n    if (this.isComplete()) {\n      BSTTypeList.push('Complete');\n    }\n\n    if (this.isPerfect()) {\n      BSTTypeList.push('Perfect');\n    }\n\n    if (this.isFull()) {\n      BSTTypeList.push('Full');\n    }\n\n    return BSTTypeList;\n  } //Subfunctions\n  //balance\n\n\n  isBalanced(node = this.root) {\n    if (node === null) return true;\n    let leftH = node.left ? node.left.height : -1;\n    let rightH = node.right ? node.right.height : -1;\n\n    if (Math.abs(leftH - rightH) <= 1) {\n      return this.isBalanced(node.left) && this.isBalanced(node.right);\n    } else {\n      return false;\n    }\n  } //complete\n\n\n  isComplete() {\n    let totalNodes = this.countNodes();\n    return this.isComplete2(0, totalNodes);\n  }\n\n  isComplete2(index, totalNodes, node = this.root) {\n    if (node === null) return true;else if (index >= totalNodes) return false;else {\n      let ans = this.isComplete2(index * 2 + 1, totalNodes, node.left);\n      ans &= this.isComplete2(index * 2 + 2, totalNodes, node.right);\n      return ans;\n    }\n  } //perfect EDITED\n\n\n  isPerfect() {\n    if (!this.isFull() || !this.isComplete()) return false;\n    return this.isPerfect2();\n  }\n\n  isPerfect2(node = this.root, depth = 0) {\n    if (!node) return true;\n    depth++;\n\n    if (!node.right && !node.left) {\n      if (this.leafDepth !== -1 && this.leafDepth !== depth) return false;\n      this.leafDepth = depth;\n    }\n\n    return this.isPerfect2(node.left, depth) && this.isPerfect2(node.right, depth);\n  } //full\n\n\n  isFull(node = this.root) {\n    if (node === null) return true;else if (node.left === null && node.right === null) return true;else if (node.left !== null && node.right !== null) {\n      let ans;\n      ans = this.isFull(node.left);\n      ans &= this.isFull(node.right);\n      return ans;\n    } else return false;\n  }\n\n  countNodes(node = this.root) {\n    if (node === null) return 0;\n    return this.countNodes(node.left) + 1 + this.countNodes(node.right);\n  } //Clears highlight of previously searched nodes\n\n\n  clearHighlight() {\n    if (this.highlighted) {\n      this.highlighted.clearHighlight();\n      this.highlighted = null;\n    }\n  }\n\n}\n\nexport default AVL;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/avl/DataStructure.js"],"names":["React","Node","constructor","value","height","left","right","parent","htmlLeft","htmlRight","html","insert","node","isLeft","newHtml","setHtml","updateRootHtml","setChildToNull","setChildToChildsChild","isLeftChild","remove","childrenCondtion","updateValue","addHighlight","clearHighlight","balanceHtml","AVL","num","root","generateRandomBST","highlighted","leafDepth","rotateRight","tempNode","setHeight","rotateLeft","leftHeight","rightHeight","Math","max","balanceCheck","balance","findMax","findMin","newNode","insertNode","removeNode","minNodeOfRight","preorder","list","push","inorder","postorder","search","upper","lower","elements","Set","i","floor","random","has","add","checkBST","BSTTypeList","isBalanced","isComplete","isPerfect","isFull","leftH","rightH","abs","totalNodes","countNodes","isComplete2","index","ans","isPerfect2","depth"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,IAAN,CAAW;AACVC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKE,IAAL,GAAY,IAAZ;AACA,SAAKC,KAAL,GAAa,IAAb;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,QAAL,gBACC;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CADD;AAMA,SAAKC,SAAL,gBACC;AAAI,MAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,CADD;AAMA,SAAKC,IAAL,gBACC;AAAI,MAAA,GAAG,EAAE,KAAKP,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKA,KADP,oBACc;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuB,KAAKC,MAA5B,CADd,CADD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKI,QADP,OACkB,KAAKC,SADvB,CAJD,CADD;AAUA,GA7BS,CA+BV;;;AACAE,EAAAA,MAAM,CAACC,IAAD,EAAOC,MAAP,EAAe;AACpB,UAAMC,OAAO,GAAGF,IAAI,CAACF,IAArB;;AAEA,QAAIG,MAAJ,EAAY;AACX,WAAKL,QAAL,GAAgBM,OAAhB;AACA,KAFD,MAEO;AACN,WAAKL,SAAL,GAAiBK,OAAjB;AACA;;AACD,SAAKC,OAAL;AACA,SAAKC,cAAL;AACA,GA1CS,CA4CV;;;AACAD,EAAAA,OAAO,GAAG;AACT,SAAKL,IAAL,gBACC;AAAI,MAAA,GAAG,EAAE,KAAKP,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKA,KADP,oBACc;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuB,KAAKC,MAA5B,CADd,CADD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKI,QADP,OACkB,KAAKC,SADvB,CAJD,CADD;AAUA,GAxDS,CA0DV;;;AACAO,EAAAA,cAAc,GAAG;AAChB,QAAI,KAAKT,MAAL,KAAgB,IAApB,EAA0B;AACzB,UAAI,KAAKA,MAAL,CAAYF,IAAZ,KAAqB,IAAzB,EAA+B,KAAKE,MAAL,CAAYI,MAAZ,CAAmB,IAAnB,EAAyB,IAAzB,EAA/B,KACK,KAAKJ,MAAL,CAAYI,MAAZ,CAAmB,IAAnB,EAAyB,KAAzB;AACL;AACD,GAhES,CAkEV;;;AACAM,EAAAA,cAAc,CAACJ,MAAD,EAAS;AACtB,QAAIA,MAAJ,EAAY;AACX,WAAKL,QAAL,gBACC;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADD;AAKA,KAND,MAMO;AACN,WAAKC,SAAL,gBACC;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADD;AAKA;;AACD,SAAKM,OAAL;AACA,SAAKC,cAAL;AACA,GAnFS,CAqFV;;;AACAE,EAAAA,qBAAqB,CAACC,WAAD,EAAcN,MAAd,EAAsB;AAC1C,QAAIM,WAAJ,EAAiB;AAChB,UAAIN,MAAJ,EAAY;AACX,aAAKL,QAAL,GAAgB,KAAKH,IAAL,CAAUA,IAAV,CAAeK,IAA/B;AACA,aAAKK,OAAL;AACA,OAHD,MAGO;AACN,aAAKP,QAAL,GAAgB,KAAKH,IAAL,CAAUC,KAAV,CAAgBI,IAAhC;AACA,aAAKK,OAAL;AACA;AACD,KARD,MAQO;AACN,UAAIF,MAAJ,EAAY;AACX,aAAKJ,SAAL,GAAiB,KAAKH,KAAL,CAAWD,IAAX,CAAgBK,IAAjC;AACA,aAAKK,OAAL;AACA,OAHD,MAGO;AACN,aAAKN,SAAL,GAAiB,KAAKH,KAAL,CAAWA,KAAX,CAAiBI,IAAlC;AAEA,aAAKK,OAAL;AACA;AACD;;AACD,SAAKC,cAAL;AACA,GA1GS,CA4GV;;;AACAI,EAAAA,MAAM,CAACC,gBAAD,EAAmB;AACxB,QAAI,CAAC,KAAKd,MAAV,EAAkB;;AAClB,QAAI,CAACc,gBAAL,EAAuB;AACtB,UAAI,KAAKd,MAAL,CAAYF,IAAZ,KAAqB,IAAzB,EAA+B;AAC9B,aAAKE,MAAL,CAAYU,cAAZ,CAA2B,IAA3B;AACA,OAFD,MAEO;AACN,aAAKV,MAAL,CAAYU,cAAZ,CAA2B,KAA3B;AACA;AACD,KAND,MAMO,IAAII,gBAAgB,KAAK,MAAzB,EAAiC;AACvC,UAAI,KAAKd,MAAL,CAAYF,IAAZ,KAAqB,IAAzB,EAA+B;AAC9B,aAAKE,MAAL,CAAYW,qBAAZ,CAAkC,IAAlC,EAAwC,IAAxC;AACA,OAFD,MAEO;AACN,aAAKX,MAAL,CAAYW,qBAAZ,CAAkC,KAAlC,EAAyC,IAAzC;AACA;AACD,KANM,MAMA;AACN,UAAI,KAAKX,MAAL,CAAYF,IAAZ,KAAqB,IAAzB,EAA+B;AAC9B,aAAKE,MAAL,CAAYW,qBAAZ,CAAkC,IAAlC,EAAwC,KAAxC;AACA,OAFD,MAEO;AACN,aAAKX,MAAL,CAAYW,qBAAZ,CAAkC,KAAlC,EAAyC,KAAzC;AACA;AACD;AACD,GAlIS,CAoIV;;;AACAI,EAAAA,WAAW,CAACnB,KAAD,EAAQ;AAClB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKY,OAAL;AACA,SAAKC,cAAL;AACA,GAzIS,CA2IV;;;AACAO,EAAAA,YAAY,GAAG;AACd,SAAKb,IAAL,gBACC;AAAI,MAAA,GAAG,EAAE,KAAKP,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKA,KADP,oBACc;AAAG,MAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAuB,KAAKC,MAA5B,CADd,CADD,eAIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,KAAKI,QADP,OACkB,KAAKC,SADvB,CAJD,CADD;AAWA,SAAKO,cAAL;AACA,GAzJS,CA2JV;;;AACAQ,EAAAA,cAAc,GAAG;AAChB,SAAKT,OAAL;AAEA,SAAKC,cAAL;AACA,GAhKS,CAkKV;;;AACAS,EAAAA,WAAW,GAAG;AACb,QAAI,CAAC,KAAKpB,IAAN,IAAc,KAAKC,KAAvB,EAA8B;AAC7B,WAAKA,KAAL,CAAWmB,WAAX;AAEA,WAAKhB,SAAL,GAAiB,KAAKH,KAAL,CAAWI,IAA5B;AACA,WAAKO,cAAL,CAAoB,IAApB;AACA,KALD,MAKO,IAAI,CAAC,KAAKX,KAAN,IAAe,KAAKD,IAAxB,EAA8B;AACpC,WAAKA,IAAL,CAAUoB,WAAV;AAEA,WAAKjB,QAAL,GAAgB,KAAKH,IAAL,CAAUK,IAA1B;AACA,WAAKO,cAAL,CAAoB,KAApB;AACA,KALM,MAKA,IAAI,KAAKX,KAAL,IAAc,KAAKD,IAAvB,EAA6B;AACnC,WAAKA,IAAL,CAAUoB,WAAV;AACA,WAAKnB,KAAL,CAAWmB,WAAX;AAEA,WAAKjB,QAAL,GAAgB,KAAKH,IAAL,CAAUK,IAA1B;AACA,WAAKD,SAAL,GAAiB,KAAKH,KAAL,CAAWI,IAA5B;AACA,WAAKK,OAAL;AACA,WAAKC,cAAL;AACA,KARM,MAQA;AACN,WAAKR,QAAL,gBACC;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADD;AAMA,WAAKC,SAAL,gBACC;AAAI,QAAA,SAAS,EAAC,MAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACC;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD,CADD;AAKA,WAAKM,OAAL;AACA,WAAKC,cAAL;AACA;AACD;;AArMS;;AAwMX,MAAMU,GAAN,CAAU;AACTxB,EAAAA,WAAW,CAACyB,GAAG,GAAG,CAAP,EAAU;AACpB,SAAKC,IAAL,GAAY,IAAZ;;AACA,QAAID,GAAJ,EAAS;AACR,WAAKE,iBAAL,CAAuBF,GAAvB;AACA;;AACD,SAAKG,WAAL,GAAmB,IAAnB;AACA,SAAKC,SAAL,GAAiB,CAAC,CAAlB;AACA,GARQ,CAUT;;;AACAC,EAAAA,WAAW,CAACpB,IAAD,EAAO;AACjB,QAAIqB,QAAQ,GAAGrB,IAAI,CAACP,IAApB;AACA,QAAIO,IAAI,CAACP,IAAL,CAAUC,KAAd,EAAqBM,IAAI,CAACP,IAAL,CAAUC,KAAV,CAAgBC,MAAhB,GAAyBK,IAAzB;AACrBA,IAAAA,IAAI,CAACP,IAAL,GAAYO,IAAI,CAACP,IAAL,CAAUC,KAAtB,CAHiB,CAKjB;;AACA2B,IAAAA,QAAQ,CAAC1B,MAAT,GAAkBK,IAAI,CAACL,MAAvB;AACAK,IAAAA,IAAI,CAACL,MAAL,GAAc0B,QAAd,CAPiB,CAQjB;;AAEAA,IAAAA,QAAQ,CAAC3B,KAAT,GAAiBM,IAAjB;AACAqB,IAAAA,QAAQ,CAAC7B,MAAT,GAAkB,KAAK8B,SAAL,CAAeD,QAAf,CAAlB;AACArB,IAAAA,IAAI,CAACR,MAAL,GAAc,KAAK8B,SAAL,CAAetB,IAAf,CAAd;AACA,WAAOqB,QAAP;AACA;;AAEDE,EAAAA,UAAU,CAACvB,IAAD,EAAO;AAChB,QAAIqB,QAAQ,GAAGrB,IAAI,CAACN,KAApB;AACA,QAAIM,IAAI,CAACN,KAAL,CAAWD,IAAf,EAAqBO,IAAI,CAACN,KAAL,CAAWD,IAAX,CAAgBE,MAAhB,GAAyBK,IAAzB;AACrBA,IAAAA,IAAI,CAACN,KAAL,GAAaM,IAAI,CAACN,KAAL,CAAWD,IAAxB,CAHgB,CAKhB;;AACA4B,IAAAA,QAAQ,CAAC1B,MAAT,GAAkBK,IAAI,CAACL,MAAvB;AACAK,IAAAA,IAAI,CAACL,MAAL,GAAc0B,QAAd,CAPgB,CAQhB;;AAEAA,IAAAA,QAAQ,CAAC5B,IAAT,GAAgBO,IAAhB,CAVgB,CAWhB;;AACAqB,IAAAA,QAAQ,CAAC7B,MAAT,GAAkB,KAAK8B,SAAL,CAAeD,QAAf,CAAlB;AACArB,IAAAA,IAAI,CAACR,MAAL,GAAc,KAAK8B,SAAL,CAAetB,IAAf,CAAd;AACA,WAAOqB,QAAP;AACA,GA1CQ,CA4CT;;;AACAC,EAAAA,SAAS,CAACtB,IAAD,EAAO;AACf,QAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,CAAC,CAAR;AACnB,QAAIwB,UAAU,GAAGxB,IAAI,CAACP,IAAL,KAAc,IAAd,GAAqBO,IAAI,CAACP,IAAL,CAAUD,MAA/B,GAAwC,CAAC,CAA1D;AACA,QAAIiC,WAAW,GAAGzB,IAAI,CAACN,KAAL,KAAe,IAAf,GAAsBM,IAAI,CAACN,KAAL,CAAWF,MAAjC,GAA0C,CAAC,CAA7D;AACA,WAAOkC,IAAI,CAACC,GAAL,CAASH,UAAT,EAAqBC,WAArB,IAAoC,CAA3C;AACA,GAlDQ,CAoDT;;;AACAG,EAAAA,YAAY,CAAC5B,IAAD,EAAO;AAClB,QAAIA,IAAI,KAAK,IAAb,EAAmB,OAAO,CAAP;AACnB,QAAIwB,UAAU,GAAGxB,IAAI,CAACP,IAAL,KAAc,IAAd,GAAqBO,IAAI,CAACP,IAAL,CAAUD,MAA/B,GAAwC,CAAC,CAA1D;AACA,QAAIiC,WAAW,GAAGzB,IAAI,CAACN,KAAL,KAAe,IAAf,GAAsBM,IAAI,CAACN,KAAL,CAAWF,MAAjC,GAA0C,CAAC,CAA7D;AACA,WAAOgC,UAAU,GAAGC,WAApB;AACA,GA1DQ,CA4DT;;;AACAI,EAAAA,OAAO,CAAC7B,IAAD,EAAO;AACb,QAAI6B,OAAO,GAAG,KAAKD,YAAL,CAAkB5B,IAAlB,CAAd;;AACA,QAAI6B,OAAO,GAAG,CAAd,EAAiB;AAChB,UACC,KAAKP,SAAL,CAAetB,IAAI,CAACP,IAAL,CAAUA,IAAzB,IACA,KAAK6B,SAAL,CAAetB,IAAI,CAACP,IAAL,CAAUC,KAAzB,CAFD,EAGE;AACDM,QAAAA,IAAI,GAAG,KAAKoB,WAAL,CAAiBpB,IAAjB,CAAP;AACA,OALD,MAKO;AACNA,QAAAA,IAAI,CAACP,IAAL,GAAY,KAAK8B,UAAL,CAAgBvB,IAAI,CAACP,IAArB,CAAZ;AAEAO,QAAAA,IAAI,GAAG,KAAKoB,WAAL,CAAiBpB,IAAjB,CAAP;AACA;AACD,KAXD,MAWO,IAAI6B,OAAO,GAAG,CAAC,CAAf,EAAkB;AACxB,UACC,KAAKP,SAAL,CAAetB,IAAI,CAACN,KAAL,CAAWA,KAA1B,IACA,KAAK4B,SAAL,CAAetB,IAAI,CAACN,KAAL,CAAWD,IAA1B,CAFD,EAGE;AACDO,QAAAA,IAAI,GAAG,KAAKuB,UAAL,CAAgBvB,IAAhB,CAAP;AACA,OALD,MAKO;AACNA,QAAAA,IAAI,CAACN,KAAL,GAAa,KAAK0B,WAAL,CAAiBpB,IAAI,CAACN,KAAtB,CAAb;AAEAM,QAAAA,IAAI,GAAG,KAAKuB,UAAL,CAAgBvB,IAAhB,CAAP;AACA;AACD;;AACD,QAAIA,IAAI,KAAK,IAAb,EAAmBA,IAAI,CAACR,MAAL,GAAc,KAAK8B,SAAL,CAAetB,IAAf,CAAd;AACnB,QAAIA,IAAI,IAAIA,IAAI,CAACN,KAAjB,EAAwBM,IAAI,CAACN,KAAL,CAAWmB,WAAX;AACxB,QAAIb,IAAI,IAAIA,IAAI,CAACP,IAAjB,EAAuBO,IAAI,CAACP,IAAL,CAAUoB,WAAV;AACvB,WAAOb,IAAP;AACA;;AAED8B,EAAAA,OAAO,CAAC9B,IAAI,GAAG,KAAKgB,IAAb,EAAmB;AACzB,QAAIhB,IAAI,IAAI,IAAZ,EAAkB;AACjB,aAAOA,IAAP;AACA,KAFD,MAEO,IAAIA,IAAI,CAACN,KAAL,IAAc,IAAlB,EAAwB;AAC9B,aAAOM,IAAP;AACA,KAFM,MAEA;AACN,aAAO,KAAK8B,OAAL,CAAa9B,IAAI,CAACN,KAAlB,CAAP;AACA;AACD;;AAEDqC,EAAAA,OAAO,CAAC/B,IAAI,GAAG,KAAKgB,IAAb,EAAmB;AACzB,QAAIhB,IAAI,IAAI,IAAZ,EAAkB;AACjB,aAAOA,IAAP;AACA,KAFD,MAEO,IAAIA,IAAI,CAACP,IAAL,IAAa,IAAjB,EAAuB;AAC7B,aAAOO,IAAP;AACA,KAFM,MAEA;AACN,aAAO,KAAK+B,OAAL,CAAa/B,IAAI,CAACP,IAAlB,CAAP;AACA;AACD,GA9GQ,CAgHT;;;AACAM,EAAAA,MAAM,CAACR,KAAD,EAAQ;AACb,SAAKqB,cAAL;AACA,QAAIoB,OAAO,GAAG,IAAI3C,IAAJ,CAASE,KAAT,CAAd;AACA,QAAI,KAAKyB,IAAL,KAAc,IAAlB,EAAwB,KAAKA,IAAL,GAAYgB,OAAZ,CAAxB,KACK,KAAKhB,IAAL,GAAY,KAAKiB,UAAL,CAAgB,KAAKjB,IAArB,EAA2BgB,OAA3B,CAAZ;AACL;;AAEDC,EAAAA,UAAU,CAACjC,IAAD,EAAOgC,OAAP,EAAgB;AACzB,QAAIA,OAAO,CAACzC,KAAR,GAAgBS,IAAI,CAACT,KAAzB,EAAgC;AAC/B,UAAIS,IAAI,CAACP,IAAL,KAAc,IAAlB,EAAwB;AACvBO,QAAAA,IAAI,CAACP,IAAL,GAAYuC,OAAZ;AACAA,QAAAA,OAAO,CAACrC,MAAR,GAAiBK,IAAjB;AACAA,QAAAA,IAAI,CAACD,MAAL,CAAYiC,OAAZ,EAAqB,IAArB;AACA,OAJD,MAIOhC,IAAI,CAACP,IAAL,GAAY,KAAKwC,UAAL,CAAgBjC,IAAI,CAACP,IAArB,EAA2BuC,OAA3B,CAAZ;AACP,KAND,MAMO;AACN,UAAIhC,IAAI,CAACN,KAAL,KAAe,IAAnB,EAAyB;AACxBM,QAAAA,IAAI,CAACN,KAAL,GAAasC,OAAb;AACAA,QAAAA,OAAO,CAACrC,MAAR,GAAiBK,IAAjB;AACAA,QAAAA,IAAI,CAACD,MAAL,CAAYiC,OAAZ,EAAqB,KAArB;AACA,OAJD,MAIOhC,IAAI,CAACN,KAAL,GAAa,KAAKuC,UAAL,CAAgBjC,IAAI,CAACN,KAArB,EAA4BsC,OAA5B,CAAb;AACP;;AAEDhC,IAAAA,IAAI,GAAG,KAAK6B,OAAL,CAAa7B,IAAb,CAAP;AACA,WAAOA,IAAP;AACA,GAzIQ,CA2IT;;;AACAQ,EAAAA,MAAM,CAACjB,KAAD,EAAQ;AACb,SAAKqB,cAAL;AACA,SAAKI,IAAL,GAAY,KAAKkB,UAAL,CAAgB,KAAKlB,IAArB,EAA2BzB,KAA3B,CAAZ;AACA;;AAED2C,EAAAA,UAAU,CAAClC,IAAD,EAAOT,KAAP,EAAc;AACvB,QAAIS,IAAI,KAAK,IAAT,IAAiB,OAAOA,IAAP,KAAgB,WAArC,EAAkD,OAAO,IAAP,CAAlD,KACK,IAAIT,KAAK,GAAGS,IAAI,CAACT,KAAjB,EAAwB;AAC5BS,MAAAA,IAAI,CAACP,IAAL,GAAY,KAAKyC,UAAL,CAAgBlC,IAAI,CAACP,IAArB,EAA2BF,KAA3B,CAAZ,CAD4B,CAE5B;AACA,KAHI,MAGE,IAAIA,KAAK,GAAGS,IAAI,CAACT,KAAjB,EAAwB;AAC9BS,MAAAA,IAAI,CAACN,KAAL,GAAa,KAAKwC,UAAL,CAAgBlC,IAAI,CAACN,KAArB,EAA4BH,KAA5B,CAAb,CAD8B,CAE9B;AACA,KAHM,MAGA;AACN,UAAIS,IAAI,CAACP,IAAL,KAAc,IAAd,IAAsBO,IAAI,CAACN,KAAL,KAAe,IAAzC,EAA+C;AAC9CM,QAAAA,IAAI,CAACQ,MAAL,CAAY,IAAZ;AACAR,QAAAA,IAAI,GAAG,IAAP,CAF8C,CAG9C;AACA,OAJD,MAIO,IAAIA,IAAI,CAACP,IAAL,KAAc,IAAlB,EAAwB;AAC9BO,QAAAA,IAAI,CAACQ,MAAL,CAAY,OAAZ;AACAR,QAAAA,IAAI,CAACN,KAAL,CAAWC,MAAX,GAAoBK,IAAI,CAACL,MAAzB;AACAK,QAAAA,IAAI,GAAGA,IAAI,CAACN,KAAZ,CAH8B,CAI9B;AACA,OALM,MAKA,IAAIM,IAAI,CAACN,KAAL,KAAe,IAAnB,EAAyB;AAC/BM,QAAAA,IAAI,CAACQ,MAAL,CAAY,MAAZ;AACAR,QAAAA,IAAI,CAACP,IAAL,CAAUE,MAAV,GAAmBK,IAAI,CAACL,MAAxB;AACAK,QAAAA,IAAI,GAAGA,IAAI,CAACP,IAAZ,CAH+B,CAI/B;AACA,OALM,MAKA;AACN,YAAI0C,cAAc,GAAG,KAAKJ,OAAL,CAAa/B,IAAI,CAACN,KAAlB,CAArB;AACAM,QAAAA,IAAI,CAACU,WAAL,CAAiByB,cAAc,CAAC5C,KAAhC;AAEAS,QAAAA,IAAI,CAACN,KAAL,GAAa,KAAKwC,UAAL,CAAgBlC,IAAI,CAACN,KAArB,EAA4ByC,cAAc,CAAC5C,KAA3C,CAAb;AACA;AACD;AACDS,IAAAA,IAAI,GAAG,KAAK6B,OAAL,CAAa7B,IAAb,CAAP;AACA,WAAOA,IAAP;AACA,GAjLQ,CAmLT;;;AACAoC,EAAAA,QAAQ,CAACC,IAAD,EAAOrC,IAAI,GAAG,KAAKgB,IAAnB,EAAyB;AAChC,QAAIhB,IAAI,KAAK,IAAb,EAAmB;AAClBqC,MAAAA,IAAI,CAACC,IAAL,CAAUtC,IAAI,CAACT,KAAf;AACA,WAAK6C,QAAL,CAAcC,IAAd,EAAoBrC,IAAI,CAACP,IAAzB;AACA,WAAK2C,QAAL,CAAcC,IAAd,EAAoBrC,IAAI,CAACN,KAAzB;AACA;AACD;;AAED6C,EAAAA,OAAO,CAACF,IAAD,EAAOrC,IAAI,GAAG,KAAKgB,IAAnB,EAAyB;AAC/B,QAAIhB,IAAI,KAAK,IAAb,EAAmB;AAClB,WAAKuC,OAAL,CAAaF,IAAb,EAAmBrC,IAAI,CAACP,IAAxB;AACA4C,MAAAA,IAAI,CAACC,IAAL,CAAUtC,IAAI,CAACT,KAAf;AACA,WAAKgD,OAAL,CAAaF,IAAb,EAAmBrC,IAAI,CAACN,KAAxB;AACA;AACD;;AAED8C,EAAAA,SAAS,CAACH,IAAD,EAAOrC,IAAI,GAAG,KAAKgB,IAAnB,EAAyB;AACjC,QAAIhB,IAAI,KAAK,IAAb,EAAmB;AAClB,WAAKwC,SAAL,CAAeH,IAAf,EAAqBrC,IAAI,CAACP,IAA1B;AACA,WAAK+C,SAAL,CAAeH,IAAf,EAAqBrC,IAAI,CAACN,KAA1B;AACA2C,MAAAA,IAAI,CAACC,IAAL,CAAUtC,IAAI,CAACT,KAAf;AACA;AACD,GA1MQ,CA4MT;;;AACAkD,EAAAA,MAAM,CAAClD,KAAD,EAAQS,IAAI,GAAG,KAAKgB,IAApB,EAA0B;AAC/B,SAAKJ,cAAL;AAEA,QAAIZ,IAAI,KAAK,IAAb,EAAmB,OAAO,KAAP,CAAnB,KACK,IAAIA,IAAI,CAACT,KAAL,KAAeA,KAAnB,EAA0B;AAC9BS,MAAAA,IAAI,CAACW,YAAL;AACA,WAAKO,WAAL,GAAmBlB,IAAnB;AACA,aAAO,IAAP;AACA,KAJI,MAIE,IAAIA,IAAI,CAACT,KAAL,GAAaA,KAAjB,EACN,OAAO,KAAKkD,MAAL,CAAYlD,KAAZ,EAAmBS,IAAI,CAACP,IAAxB,CAAP,CADM,KAEF,OAAO,KAAKgD,MAAL,CAAYlD,KAAZ,EAAmBS,IAAI,CAACN,KAAxB,CAAP;AACL,GAxNQ,CA0NT;;;AACAuB,EAAAA,iBAAiB,CAACF,GAAD,EAAM;AACtB,QAAI2B,KAAK,GAAG,CAAZ;AACA,QAAIC,KAAK,GAAG5B,GAAG,GAAG,CAAN,GAAU,EAAtB;AACA,QAAI6B,QAAQ,GAAG,IAAIC,GAAJ,EAAf;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG/B,GAApB,EAAyB+B,CAAC,EAA1B,EAA8B;AAC7B,UAAIvD,KAAK,GACRmC,IAAI,CAACqB,KAAL,CAAWrB,IAAI,CAACsB,MAAL,MAAiBN,KAAK,GAAGC,KAAR,GAAgB,CAAjC,CAAX,IAAkDA,KADnD;;AAEA,aAAOC,QAAQ,CAACK,GAAT,CAAa1D,KAAb,CAAP,EAA4B;AAC3BA,QAAAA,KAAK,GACJmC,IAAI,CAACqB,KAAL,CAAWrB,IAAI,CAACsB,MAAL,MAAiBN,KAAK,GAAGC,KAAR,GAAgB,CAAjC,CAAX,IAAkDA,KADnD;AAEA;;AACDC,MAAAA,QAAQ,CAACM,GAAT,CAAa3D,KAAb;AAEA,WAAKQ,MAAL,CAAYR,KAAZ;AACA;AACD,GA3OQ,CA6OT;AACA;;;AACA4D,EAAAA,QAAQ,GAAG;AACV,QAAIC,WAAW,GAAG,EAAlB;;AACA,QAAI,KAAKC,UAAL,EAAJ,EAAuB;AACtBD,MAAAA,WAAW,CAACd,IAAZ,CAAiB,UAAjB;AACA;;AACD,QAAI,KAAKgB,UAAL,EAAJ,EAAuB;AACtBF,MAAAA,WAAW,CAACd,IAAZ,CAAiB,UAAjB;AACA;;AACD,QAAI,KAAKiB,SAAL,EAAJ,EAAsB;AACrBH,MAAAA,WAAW,CAACd,IAAZ,CAAiB,SAAjB;AACA;;AACD,QAAI,KAAKkB,MAAL,EAAJ,EAAmB;AAClBJ,MAAAA,WAAW,CAACd,IAAZ,CAAiB,MAAjB;AACA;;AACD,WAAOc,WAAP;AACA,GA9PQ,CAgQT;AACA;;;AACAC,EAAAA,UAAU,CAACrD,IAAI,GAAG,KAAKgB,IAAb,EAAmB;AAC5B,QAAIhB,IAAI,KAAK,IAAb,EAAmB,OAAO,IAAP;AACnB,QAAIyD,KAAK,GAAGzD,IAAI,CAACP,IAAL,GAAYO,IAAI,CAACP,IAAL,CAAUD,MAAtB,GAA+B,CAAC,CAA5C;AACA,QAAIkE,MAAM,GAAG1D,IAAI,CAACN,KAAL,GAAaM,IAAI,CAACN,KAAL,CAAWF,MAAxB,GAAiC,CAAC,CAA/C;;AACA,QAAIkC,IAAI,CAACiC,GAAL,CAASF,KAAK,GAAGC,MAAjB,KAA4B,CAAhC,EAAmC;AAClC,aAAO,KAAKL,UAAL,CAAgBrD,IAAI,CAACP,IAArB,KAA8B,KAAK4D,UAAL,CAAgBrD,IAAI,CAACN,KAArB,CAArC;AACA,KAFD,MAEO;AACN,aAAO,KAAP;AACA;AACD,GA3QQ,CA6QT;;;AACA4D,EAAAA,UAAU,GAAG;AACZ,QAAIM,UAAU,GAAG,KAAKC,UAAL,EAAjB;AACA,WAAO,KAAKC,WAAL,CAAiB,CAAjB,EAAoBF,UAApB,CAAP;AACA;;AACDE,EAAAA,WAAW,CAACC,KAAD,EAAQH,UAAR,EAAoB5D,IAAI,GAAG,KAAKgB,IAAhC,EAAsC;AAChD,QAAIhB,IAAI,KAAK,IAAb,EAAmB,OAAO,IAAP,CAAnB,KACK,IAAI+D,KAAK,IAAIH,UAAb,EAAyB,OAAO,KAAP,CAAzB,KACA;AACJ,UAAII,GAAG,GAAG,KAAKF,WAAL,CAAiBC,KAAK,GAAG,CAAR,GAAY,CAA7B,EAAgCH,UAAhC,EAA4C5D,IAAI,CAACP,IAAjD,CAAV;AACAuE,MAAAA,GAAG,IAAI,KAAKF,WAAL,CAAiBC,KAAK,GAAG,CAAR,GAAY,CAA7B,EAAgCH,UAAhC,EAA4C5D,IAAI,CAACN,KAAjD,CAAP;AACA,aAAOsE,GAAP;AACA;AACD,GA1RQ,CA4RT;;;AACAT,EAAAA,SAAS,GAAG;AACX,QAAI,CAAC,KAAKC,MAAL,EAAD,IAAkB,CAAC,KAAKF,UAAL,EAAvB,EAA0C,OAAO,KAAP;AAC1C,WAAO,KAAKW,UAAL,EAAP;AACA;;AAEDA,EAAAA,UAAU,CAACjE,IAAI,GAAG,KAAKgB,IAAb,EAAmBkD,KAAK,GAAG,CAA3B,EAA8B;AACvC,QAAI,CAAClE,IAAL,EAAW,OAAO,IAAP;AACXkE,IAAAA,KAAK;;AACL,QAAI,CAAClE,IAAI,CAACN,KAAN,IAAe,CAACM,IAAI,CAACP,IAAzB,EAA+B;AAC9B,UAAI,KAAK0B,SAAL,KAAmB,CAAC,CAApB,IAAyB,KAAKA,SAAL,KAAmB+C,KAAhD,EACC,OAAO,KAAP;AACD,WAAK/C,SAAL,GAAiB+C,KAAjB;AACA;;AACD,WACC,KAAKD,UAAL,CAAgBjE,IAAI,CAACP,IAArB,EAA2ByE,KAA3B,KACA,KAAKD,UAAL,CAAgBjE,IAAI,CAACN,KAArB,EAA4BwE,KAA5B,CAFD;AAIA,GA9SQ,CAgTT;;;AACAV,EAAAA,MAAM,CAACxD,IAAI,GAAG,KAAKgB,IAAb,EAAmB;AACxB,QAAIhB,IAAI,KAAK,IAAb,EAAmB,OAAO,IAAP,CAAnB,KACK,IAAIA,IAAI,CAACP,IAAL,KAAc,IAAd,IAAsBO,IAAI,CAACN,KAAL,KAAe,IAAzC,EAA+C,OAAO,IAAP,CAA/C,KACA,IAAIM,IAAI,CAACP,IAAL,KAAc,IAAd,IAAsBO,IAAI,CAACN,KAAL,KAAe,IAAzC,EAA+C;AACnD,UAAIsE,GAAJ;AACAA,MAAAA,GAAG,GAAG,KAAKR,MAAL,CAAYxD,IAAI,CAACP,IAAjB,CAAN;AACAuE,MAAAA,GAAG,IAAI,KAAKR,MAAL,CAAYxD,IAAI,CAACN,KAAjB,CAAP;AACA,aAAOsE,GAAP;AACA,KALI,MAKE,OAAO,KAAP;AACP;;AAEDH,EAAAA,UAAU,CAAC7D,IAAI,GAAG,KAAKgB,IAAb,EAAmB;AAC5B,QAAIhB,IAAI,KAAK,IAAb,EAAmB,OAAO,CAAP;AACnB,WACC,KAAK6D,UAAL,CAAgB7D,IAAI,CAACP,IAArB,IAA6B,CAA7B,GAAiC,KAAKoE,UAAL,CAAgB7D,IAAI,CAACN,KAArB,CADlC;AAGA,GAjUQ,CAmUT;;;AACAkB,EAAAA,cAAc,GAAG;AAChB,QAAI,KAAKM,WAAT,EAAsB;AACrB,WAAKA,WAAL,CAAiBN,cAAjB;AACA,WAAKM,WAAL,GAAmB,IAAnB;AACA;AACD;;AAzUQ;;AA4UV,eAAeJ,GAAf","sourcesContent":["import React from 'react'\r\n\r\nclass Node {\r\n\tconstructor(value) {\r\n\t\tthis.height = 0\r\n\t\tthis.value = value\r\n\t\tthis.left = null\r\n\t\tthis.right = null\r\n\t\tthis.parent = null\r\n\t\tthis.htmlLeft = (\r\n\t\t\t<li className=\"null\">\r\n\t\t\t\t<div>null</div>\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tthis.htmlRight = (\r\n\t\t\t<li className=\"null\">\r\n\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className=\"normal\">\r\n\t\t\t\t\t{this.value} <p className=\"height\">{this.height}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.htmlLeft} {this.htmlRight}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\t//Inserting html of a new node\r\n\tinsert(node, isLeft) {\r\n\t\tconst newHtml = node.html\r\n\r\n\t\tif (isLeft) {\r\n\t\t\tthis.htmlLeft = newHtml\r\n\t\t} else {\r\n\t\t\tthis.htmlRight = newHtml\r\n\t\t}\r\n\t\tthis.setHtml()\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Updating html of a node\r\n\tsetHtml() {\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className=\"normal\">\r\n\t\t\t\t\t{this.value} <p className=\"height\">{this.height}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.htmlLeft} {this.htmlRight}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\t//Updating html of the whole tree\r\n\tupdateRootHtml() {\r\n\t\tif (this.parent !== null) {\r\n\t\t\tif (this.parent.left === this) this.parent.insert(this, true)\r\n\t\t\telse this.parent.insert(this, false)\r\n\t\t}\r\n\t}\r\n\r\n\t//Changing a child to null\r\n\tsetChildToNull(isLeft) {\r\n\t\tif (isLeft) {\r\n\t\t\tthis.htmlLeft = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div>null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\tthis.htmlRight = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div>null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t}\r\n\t\tthis.setHtml()\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//interchanging a child with a grandchild\r\n\tsetChildToChildsChild(isLeftChild, isLeft) {\r\n\t\tif (isLeftChild) {\r\n\t\t\tif (isLeft) {\r\n\t\t\t\tthis.htmlLeft = this.left.left.html\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t} else {\r\n\t\t\t\tthis.htmlLeft = this.left.right.html\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (isLeft) {\r\n\t\t\t\tthis.htmlRight = this.right.left.html\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t} else {\r\n\t\t\t\tthis.htmlRight = this.right.right.html\r\n\r\n\t\t\t\tthis.setHtml()\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Removing html of a deleted node\r\n\tremove(childrenCondtion) {\r\n\t\tif (!this.parent) return\r\n\t\tif (!childrenCondtion) {\r\n\t\t\tif (this.parent.left === this) {\r\n\t\t\t\tthis.parent.setChildToNull(true)\r\n\t\t\t} else {\r\n\t\t\t\tthis.parent.setChildToNull(false)\r\n\t\t\t}\r\n\t\t} else if (childrenCondtion === 'left') {\r\n\t\t\tif (this.parent.left === this) {\r\n\t\t\t\tthis.parent.setChildToChildsChild(true, true)\r\n\t\t\t} else {\r\n\t\t\t\tthis.parent.setChildToChildsChild(false, true)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.parent.left === this) {\r\n\t\t\t\tthis.parent.setChildToChildsChild(true, false)\r\n\t\t\t} else {\r\n\t\t\t\tthis.parent.setChildToChildsChild(false, false)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//Updates value of a node html\r\n\tupdateValue(value) {\r\n\t\tthis.value = value\r\n\t\tthis.setHtml()\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Adds Highlight to node html\r\n\taddHighlight() {\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.value}>\r\n\t\t\t\t<div className=\"normal highlight\">\r\n\t\t\t\t\t{this.value} <p className=\"height\">{this.height}</p>\r\n\t\t\t\t</div>\r\n\t\t\t\t<ul>\r\n\t\t\t\t\t{this.htmlLeft} {this.htmlRight}\r\n\t\t\t\t</ul>\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Clears Highlight of the node html\r\n\tclearHighlight() {\r\n\t\tthis.setHtml()\r\n\r\n\t\tthis.updateRootHtml()\r\n\t}\r\n\r\n\t//Updating html after balancing\r\n\tbalanceHtml() {\r\n\t\tif (!this.left && this.right) {\r\n\t\t\tthis.right.balanceHtml()\r\n\r\n\t\t\tthis.htmlRight = this.right.html\r\n\t\t\tthis.setChildToNull(true)\r\n\t\t} else if (!this.right && this.left) {\r\n\t\t\tthis.left.balanceHtml()\r\n\r\n\t\t\tthis.htmlLeft = this.left.html\r\n\t\t\tthis.setChildToNull(false)\r\n\t\t} else if (this.right && this.left) {\r\n\t\t\tthis.left.balanceHtml()\r\n\t\t\tthis.right.balanceHtml()\r\n\r\n\t\t\tthis.htmlLeft = this.left.html\r\n\t\t\tthis.htmlRight = this.right.html\r\n\t\t\tthis.setHtml()\r\n\t\t\tthis.updateRootHtml()\r\n\t\t} else {\r\n\t\t\tthis.htmlLeft = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div>null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\r\n\t\t\tthis.htmlRight = (\r\n\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t\tthis.setHtml()\r\n\t\t\tthis.updateRootHtml()\r\n\t\t}\r\n\t}\r\n}\r\n\r\nclass AVL {\r\n\tconstructor(num = 0) {\r\n\t\tthis.root = null\r\n\t\tif (num) {\r\n\t\t\tthis.generateRandomBST(num)\r\n\t\t}\r\n\t\tthis.highlighted = null\r\n\t\tthis.leafDepth = -1\r\n\t}\r\n\r\n\t//Helper functions\r\n\trotateRight(node) {\r\n\t\tlet tempNode = node.left\r\n\t\tif (node.left.right) node.left.right.parent = node\r\n\t\tnode.left = node.left.right\r\n\r\n\t\t//For Handling HTML\r\n\t\ttempNode.parent = node.parent\r\n\t\tnode.parent = tempNode\r\n\t\t//For Handling HTML END\r\n\r\n\t\ttempNode.right = node\r\n\t\ttempNode.height = this.setHeight(tempNode)\r\n\t\tnode.height = this.setHeight(node)\r\n\t\treturn tempNode\r\n\t}\r\n\r\n\trotateLeft(node) {\r\n\t\tlet tempNode = node.right\r\n\t\tif (node.right.left) node.right.left.parent = node\r\n\t\tnode.right = node.right.left\r\n\r\n\t\t//For Handling HTML\r\n\t\ttempNode.parent = node.parent\r\n\t\tnode.parent = tempNode\r\n\t\t//For Handling HTML END\r\n\r\n\t\ttempNode.left = node\r\n\t\t// tempNode.left\r\n\t\ttempNode.height = this.setHeight(tempNode)\r\n\t\tnode.height = this.setHeight(node)\r\n\t\treturn tempNode\r\n\t}\r\n\r\n\t//Sets hight of a node\r\n\tsetHeight(node) {\r\n\t\tif (node === null) return -1\r\n\t\tlet leftHeight = node.left !== null ? node.left.height : -1\r\n\t\tlet rightHeight = node.right !== null ? node.right.height : -1\r\n\t\treturn Math.max(leftHeight, rightHeight) + 1\r\n\t}\r\n\r\n\t//Checks if a sub tree is balanced\r\n\tbalanceCheck(node) {\r\n\t\tif (node === null) return 0\r\n\t\tlet leftHeight = node.left !== null ? node.left.height : -1\r\n\t\tlet rightHeight = node.right !== null ? node.right.height : -1\r\n\t\treturn leftHeight - rightHeight\r\n\t}\r\n\r\n\t//Balances the Tree\r\n\tbalance(node) {\r\n\t\tlet balance = this.balanceCheck(node)\r\n\t\tif (balance > 1) {\r\n\t\t\tif (\r\n\t\t\t\tthis.setHeight(node.left.left) >\r\n\t\t\t\tthis.setHeight(node.left.right)\r\n\t\t\t) {\r\n\t\t\t\tnode = this.rotateRight(node)\r\n\t\t\t} else {\r\n\t\t\t\tnode.left = this.rotateLeft(node.left)\r\n\r\n\t\t\t\tnode = this.rotateRight(node)\r\n\t\t\t}\r\n\t\t} else if (balance < -1) {\r\n\t\t\tif (\r\n\t\t\t\tthis.setHeight(node.right.right) >\r\n\t\t\t\tthis.setHeight(node.right.left)\r\n\t\t\t) {\r\n\t\t\t\tnode = this.rotateLeft(node)\r\n\t\t\t} else {\r\n\t\t\t\tnode.right = this.rotateRight(node.right)\r\n\r\n\t\t\t\tnode = this.rotateLeft(node)\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (node !== null) node.height = this.setHeight(node)\r\n\t\tif (node && node.right) node.right.balanceHtml()\r\n\t\tif (node && node.left) node.left.balanceHtml()\r\n\t\treturn node\r\n\t}\r\n\r\n\tfindMax(node = this.root) {\r\n\t\tif (node == null) {\r\n\t\t\treturn node\r\n\t\t} else if (node.right == null) {\r\n\t\t\treturn node\r\n\t\t} else {\r\n\t\t\treturn this.findMax(node.right)\r\n\t\t}\r\n\t}\r\n\r\n\tfindMin(node = this.root) {\r\n\t\tif (node == null) {\r\n\t\t\treturn node\r\n\t\t} else if (node.left == null) {\r\n\t\t\treturn node\r\n\t\t} else {\r\n\t\t\treturn this.findMin(node.left)\r\n\t\t}\r\n\t}\r\n\r\n\t//inserting a new node\r\n\tinsert(value) {\r\n\t\tthis.clearHighlight()\r\n\t\tvar newNode = new Node(value)\r\n\t\tif (this.root === null) this.root = newNode\r\n\t\telse this.root = this.insertNode(this.root, newNode)\r\n\t}\r\n\r\n\tinsertNode(node, newNode) {\r\n\t\tif (newNode.value < node.value) {\r\n\t\t\tif (node.left === null) {\r\n\t\t\t\tnode.left = newNode\r\n\t\t\t\tnewNode.parent = node\r\n\t\t\t\tnode.insert(newNode, true)\r\n\t\t\t} else node.left = this.insertNode(node.left, newNode)\r\n\t\t} else {\r\n\t\t\tif (node.right === null) {\r\n\t\t\t\tnode.right = newNode\r\n\t\t\t\tnewNode.parent = node\r\n\t\t\t\tnode.insert(newNode, false)\r\n\t\t\t} else node.right = this.insertNode(node.right, newNode)\r\n\t\t}\r\n\r\n\t\tnode = this.balance(node)\r\n\t\treturn node\r\n\t}\r\n\r\n\t//Deleting node\r\n\tremove(value) {\r\n\t\tthis.clearHighlight()\r\n\t\tthis.root = this.removeNode(this.root, value)\r\n\t}\r\n\r\n\tremoveNode(node, value) {\r\n\t\tif (node === null || typeof node === 'undefined') return null\r\n\t\telse if (value < node.value) {\r\n\t\t\tnode.left = this.removeNode(node.left, value)\r\n\t\t\t// return node\r\n\t\t} else if (value > node.value) {\r\n\t\t\tnode.right = this.removeNode(node.right, value)\r\n\t\t\t// return node\r\n\t\t} else {\r\n\t\t\tif (node.left === null && node.right === null) {\r\n\t\t\t\tnode.remove(null)\r\n\t\t\t\tnode = null\r\n\t\t\t\t// return node\r\n\t\t\t} else if (node.left === null) {\r\n\t\t\t\tnode.remove('right')\r\n\t\t\t\tnode.right.parent = node.parent\r\n\t\t\t\tnode = node.right\r\n\t\t\t\t// return node\r\n\t\t\t} else if (node.right === null) {\r\n\t\t\t\tnode.remove('left')\r\n\t\t\t\tnode.left.parent = node.parent\r\n\t\t\t\tnode = node.left\r\n\t\t\t\t// return node\r\n\t\t\t} else {\r\n\t\t\t\tvar minNodeOfRight = this.findMin(node.right)\r\n\t\t\t\tnode.updateValue(minNodeOfRight.value)\r\n\r\n\t\t\t\tnode.right = this.removeNode(node.right, minNodeOfRight.value)\r\n\t\t\t}\r\n\t\t}\r\n\t\tnode = this.balance(node)\r\n\t\treturn node\r\n\t}\r\n\r\n\t//Tree Traversal\r\n\tpreorder(list, node = this.root) {\r\n\t\tif (node !== null) {\r\n\t\t\tlist.push(node.value)\r\n\t\t\tthis.preorder(list, node.left)\r\n\t\t\tthis.preorder(list, node.right)\r\n\t\t}\r\n\t}\r\n\r\n\tinorder(list, node = this.root) {\r\n\t\tif (node !== null) {\r\n\t\t\tthis.inorder(list, node.left)\r\n\t\t\tlist.push(node.value)\r\n\t\t\tthis.inorder(list, node.right)\r\n\t\t}\r\n\t}\r\n\r\n\tpostorder(list, node = this.root) {\r\n\t\tif (node !== null) {\r\n\t\t\tthis.postorder(list, node.left)\r\n\t\t\tthis.postorder(list, node.right)\r\n\t\t\tlist.push(node.value)\r\n\t\t}\r\n\t}\r\n\r\n\t//Search\r\n\tsearch(value, node = this.root) {\r\n\t\tthis.clearHighlight()\r\n\r\n\t\tif (node === null) return false\r\n\t\telse if (node.value === value) {\r\n\t\t\tnode.addHighlight()\r\n\t\t\tthis.highlighted = node\r\n\t\t\treturn true\r\n\t\t} else if (node.value > value)\r\n\t\t\treturn this.search(value, node.left)\r\n\t\telse return this.search(value, node.right)\r\n\t}\r\n\r\n\t//Random Tree generator\r\n\tgenerateRandomBST(num) {\r\n\t\tlet upper = 0\r\n\t\tlet lower = num * 2 + 10\r\n\t\tlet elements = new Set()\r\n\r\n\t\tfor (let i = 0; i < num; i++) {\r\n\t\t\tlet value =\r\n\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\twhile (elements.has(value)) {\r\n\t\t\t\tvalue =\r\n\t\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\t}\r\n\t\t\telements.add(value)\r\n\r\n\t\t\tthis.insert(value)\r\n\t\t}\r\n\t}\r\n\r\n\t//BST Checker\r\n\t//Main Checker function\r\n\tcheckBST() {\r\n\t\tlet BSTTypeList = []\r\n\t\tif (this.isBalanced()) {\r\n\t\t\tBSTTypeList.push('Balanced')\r\n\t\t}\r\n\t\tif (this.isComplete()) {\r\n\t\t\tBSTTypeList.push('Complete')\r\n\t\t}\r\n\t\tif (this.isPerfect()) {\r\n\t\t\tBSTTypeList.push('Perfect')\r\n\t\t}\r\n\t\tif (this.isFull()) {\r\n\t\t\tBSTTypeList.push('Full')\r\n\t\t}\r\n\t\treturn BSTTypeList\r\n\t}\r\n\r\n\t//Subfunctions\r\n\t//balance\r\n\tisBalanced(node = this.root) {\r\n\t\tif (node === null) return true\r\n\t\tlet leftH = node.left ? node.left.height : -1\r\n\t\tlet rightH = node.right ? node.right.height : -1\r\n\t\tif (Math.abs(leftH - rightH) <= 1) {\r\n\t\t\treturn this.isBalanced(node.left) && this.isBalanced(node.right)\r\n\t\t} else {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\t//complete\r\n\tisComplete() {\r\n\t\tlet totalNodes = this.countNodes()\r\n\t\treturn this.isComplete2(0, totalNodes)\r\n\t}\r\n\tisComplete2(index, totalNodes, node = this.root) {\r\n\t\tif (node === null) return true\r\n\t\telse if (index >= totalNodes) return false\r\n\t\telse {\r\n\t\t\tlet ans = this.isComplete2(index * 2 + 1, totalNodes, node.left)\r\n\t\t\tans &= this.isComplete2(index * 2 + 2, totalNodes, node.right)\r\n\t\t\treturn ans\r\n\t\t}\r\n\t}\r\n\r\n\t//perfect EDITED\r\n\tisPerfect() {\r\n\t\tif (!this.isFull() || !this.isComplete()) return false\r\n\t\treturn this.isPerfect2()\r\n\t}\r\n\r\n\tisPerfect2(node = this.root, depth = 0) {\r\n\t\tif (!node) return true\r\n\t\tdepth++\r\n\t\tif (!node.right && !node.left) {\r\n\t\t\tif (this.leafDepth !== -1 && this.leafDepth !== depth)\r\n\t\t\t\treturn false\r\n\t\t\tthis.leafDepth = depth\r\n\t\t}\r\n\t\treturn (\r\n\t\t\tthis.isPerfect2(node.left, depth) &&\r\n\t\t\tthis.isPerfect2(node.right, depth)\r\n\t\t)\r\n\t}\r\n\r\n\t//full\r\n\tisFull(node = this.root) {\r\n\t\tif (node === null) return true\r\n\t\telse if (node.left === null && node.right === null) return true\r\n\t\telse if (node.left !== null && node.right !== null) {\r\n\t\t\tlet ans\r\n\t\t\tans = this.isFull(node.left)\r\n\t\t\tans &= this.isFull(node.right)\r\n\t\t\treturn ans\r\n\t\t} else return false\r\n\t}\r\n\r\n\tcountNodes(node = this.root) {\r\n\t\tif (node === null) return 0\r\n\t\treturn (\r\n\t\t\tthis.countNodes(node.left) + 1 + this.countNodes(node.right)\r\n\t\t)\r\n\t}\r\n\r\n\t//Clears highlight of previously searched nodes\r\n\tclearHighlight() {\r\n\t\tif (this.highlighted) {\r\n\t\t\tthis.highlighted.clearHighlight()\r\n\t\t\tthis.highlighted = null\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default AVL\r\n"]},"metadata":{},"sourceType":"module"}