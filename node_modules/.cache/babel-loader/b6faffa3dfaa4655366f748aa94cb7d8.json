{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\bst\\\\BSTree.js\";\nimport React, { useState, useEffect } from 'react';\nimport BSTMenu from './BSTMenu';\nimport BST from './DataStructure';\nimport BSTPopup from './BSTPopup';\nimport useDelError from '../../hooks/useDelError';\nimport { Icon } from '@iconify/react';\nimport questionMarkCircleOutline from '@iconify/icons-eva/question-mark-circle-outline';\nimport usePopup from '../../hooks/usePopup';\nimport useTraversal from '../../hooks/useTraversal';\n\nfunction BSTree(props) {\n  //hooks\n  const [tree, setTree] = useState();\n  const [treeHtml, setTreeHtml] = useState();\n  const [delError, setDelError] = useDelError(treeHtml);\n  const [searchError, setSearchError] = useDelError(treeHtml);\n  const [traversalList, traversalDispatch] = useTraversal(tree);\n  const [popup, togglePopup] = usePopup(); //Initializing Tree\n\n  useEffect(() => {\n    let tempTree = new BST();\n    setTree(tempTree);\n    return () => {\n      setTree(null);\n      setTreeHtml(null);\n    };\n  }, []); //Insert Function\n\n  const insert = val => {\n    val = parseInt(val);\n    if (!val) return;\n    let tempTree = tree;\n    tempTree.insert(val);\n    setTree(tempTree);\n    setTreeHtml(tree.root.html);\n    traversalDispatch('clear');\n  };\n\n  const random = num => {\n    num = parseInt(num);\n    if (num < 0) return;\n    let tempTree = new BST(num);\n    setTree(tempTree);\n    if (num) setTreeHtml(tempTree.root.html);else setTreeHtml(null);\n    traversalDispatch('clear');\n  }; //Remove\n\n\n  const remove = val => {\n    val = parseInt(val);\n    let tempTree = tree;\n    setDelError(false);\n\n    if (!tempTree.search(val)) {\n      setDelError(true);\n      return;\n    }\n\n    tempTree.remove(val);\n    setTree(tempTree);\n    if (tree.root) setTreeHtml(tree.root.html);else setTreeHtml(null);\n    traversalDispatch('clear');\n  }; //Search\n\n\n  const search = val => {\n    val = parseInt(val);\n    let tempTree = tree;\n    setSearchError(false);\n\n    if (!tempTree.search(val)) {\n      setSearchError(true);\n      return;\n    }\n\n    tempTree.search(val);\n    setTree(tempTree);\n    if (tree.root) setTreeHtml(tree.root.html);else setTreeHtml(null);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, \"Binary Search Tree\", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"question_but\",\n    onClick: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: questionMarkCircleOutline,\n    width: \"25px\",\n    height: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 6\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.statefunc([true, false, false]),\n    className: \"main-menu-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, \"Home\")), /*#__PURE__*/React.createElement(BSTMenu, {\n    insert: insert,\n    remove: remove,\n    search: search,\n    random: random,\n    traversal: traversalDispatch,\n    delError: delError ? 'error' : '',\n    seaError: searchError ? 'error' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"traversal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 4\n    }\n  }, traversalList.list.length ? /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 6\n    }\n  }, ' ', traversalList.op, \":\", traversalList.list.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 8\n    }\n  }, item))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 6\n    }\n  }, \"No Traversal Performed\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, treeHtml)), popup ? /*#__PURE__*/React.createElement(BSTPopup, {\n    toggle: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }) : null);\n}\n\nexport default BSTree;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/bst/BSTree.js"],"names":["React","useState","useEffect","BSTMenu","BST","BSTPopup","useDelError","Icon","questionMarkCircleOutline","usePopup","useTraversal","BSTree","props","tree","setTree","treeHtml","setTreeHtml","delError","setDelError","searchError","setSearchError","traversalList","traversalDispatch","popup","togglePopup","tempTree","insert","val","parseInt","root","html","random","num","remove","search","statefunc","list","length","op","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport BSTMenu from './BSTMenu'\r\nimport BST from './DataStructure'\r\nimport BSTPopup from './BSTPopup'\r\nimport useDelError from '../../hooks/useDelError'\r\nimport { Icon } from '@iconify/react'\r\nimport questionMarkCircleOutline from '@iconify/icons-eva/question-mark-circle-outline'\r\nimport usePopup from '../../hooks/usePopup'\r\nimport useTraversal from '../../hooks/useTraversal'\r\n\r\nfunction BSTree(props) {\r\n\t//hooks\r\n\tconst [tree, setTree] = useState();\r\n\tconst [treeHtml, setTreeHtml] = useState();\r\n\tconst [delError, setDelError] = useDelError(treeHtml);\r\n\tconst [searchError, setSearchError] = useDelError(treeHtml);\r\n\tconst [traversalList, traversalDispatch] = useTraversal(tree);\r\n\tconst [popup, togglePopup] = usePopup();\r\n\r\n\t//Initializing Tree\r\n\tuseEffect(() => {\r\n\t\tlet tempTree = new BST();\r\n\t\tsetTree(tempTree);\r\n\t\treturn () => {\r\n\t\t\tsetTree(null);\r\n\t\t\tsetTreeHtml(null);\r\n\t\t}\r\n\t}, [])\r\n\r\n\t//Insert Function\r\n\tconst insert = (val) => {\r\n\t\tval = parseInt(val);\r\n\t\tif (!val) return;\r\n\t\tlet tempTree = tree;\r\n\t\ttempTree.insert(val);\r\n\t\tsetTree(tempTree);\r\n\t\tsetTreeHtml(tree.root.html);\r\n\t\ttraversalDispatch('clear');\r\n\r\n\t}\r\n    const random = (num) => {\r\n\t\tnum = parseInt(num)\r\n\t\tif (num < 0) return;\r\n\t\tlet tempTree = new BST(num)\r\n\t\tsetTree(tempTree);\r\n\r\n\t\tif (num) setTreeHtml(tempTree.root.html)\r\n\t\telse setTreeHtml(null)\r\n\t\ttraversalDispatch('clear')\r\n\r\n\t}\r\n\t//Remove\r\n\tconst remove = val => {\r\n\t\tval = parseInt(val)\r\n\t\tlet tempTree = tree\r\n\t\tsetDelError(false)\r\n\t\tif (!tempTree.search(val)) {\r\n\t\t\tsetDelError(true)\r\n\t\t\treturn\r\n\t\t}\r\n\t\ttempTree.remove(val)\r\n\t\tsetTree(tempTree)\r\n\t\tif (tree.root) setTreeHtml(tree.root.html)\r\n\t\telse setTreeHtml(null)\r\n\t\ttraversalDispatch('clear')\r\n\r\n\t}\r\n\r\n\t//Search\r\n\tconst search = val => {\r\n\t\tval = parseInt(val)\r\n\t\tlet tempTree = tree\r\n\r\n\t\tsetSearchError(false)\r\n\t\tif (!tempTree.search(val)) {\r\n\t\t\tsetSearchError(true)\r\n\t\t\treturn\r\n\t\t}\r\n\t\t\r\n\t\ttempTree.search(val)\r\n\t\tsetTree(tempTree)\r\n\t\tif (tree.root) setTreeHtml(tree.root.html)\r\n\t\telse setTreeHtml(null)\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<header>\r\n\t\t\t\t<h1 className=\"heading\">\r\n\t\t\t\t\tBinary Search Tree\r\n\t\t\t\t\t<button className=\"question_but\" onClick={togglePopup}>\r\n\t\t\t\t\t<Icon\r\n\t\t\t\t\t\t\ticon={questionMarkCircleOutline}\r\n\t\t\t\t\t\t\twidth=\"25px\"\r\n\t\t\t\t\t\t\theight=\"25px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</h1>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={() => props.statefunc([true,false,false])}\r\n\t\t\t\t\tclassName=\"main-menu-button\"\r\n\t\t\t\t>\r\n\t\t\t\t\tHome\r\n\t\t\t\t</button>\r\n\t\t\t</header>\r\n\t\t\t<BSTMenu\r\n\t\t\t\tinsert={insert}\r\n\t\t\t\tremove={remove}\r\n\t\t\t\tsearch={search}\r\n\t\t\t\trandom={random}\r\n\t\t\t\ttraversal={traversalDispatch}\r\n\t\t\t\tdelError={delError ? 'error' : ''}\r\n\t\t\t\tseaError={searchError ? 'error' : ''}\r\n\t\t\t/>\r\n\t\t\t<div className=\"traversal\">\r\n\t\t\t\t{traversalList.list.length ? (\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t{traversalList.op}:\r\n\t\t\t\t\t\t{traversalList.list.map((item, index) => (\r\n\t\t\t\t\t\t\t<li key={index}>{item}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<p>No Traversal Performed</p>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"tree\">\r\n\t\t\t\t<ul>{treeHtml}</ul>\r\n\t\t\t</div>\r\n\t\t\t{popup ? <BSTPopup toggle={togglePopup} /> : null}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default BSTree\r\n"]},"metadata":{},"sourceType":"module"}