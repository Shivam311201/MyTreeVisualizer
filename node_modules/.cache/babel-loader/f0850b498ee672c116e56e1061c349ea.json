{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\maxHeap\\\\DataStructure.js\";\nimport React from 'react';\n\nclass MaxHeap {\n  constructor(num = 0) {\n    this.end = 0;\n    this.heap = [];\n    this.html = null;\n\n    if (num) {\n      this.generateRandomMaxH(num);\n    }\n  } //Helper Functions\n\n\n  heapifyUp(j) {\n    if (j === 0) return;\n    let p = j;\n    if (p % 2 === 0) p -= 2;else p--;\n    p /= 2;\n\n    if (this.heap[p] < this.heap[j]) {\n      ;\n      [this.heap[p], this.heap[j]] = [this.heap[j], this.heap[p]];\n      this.heapifyUp(p);\n    }\n  }\n\n  heapifyDown(p = 0) {\n    let c1 = 2 * p + 1;\n    let c2 = c1 + 1;\n    if (c2 >= this.end && c1 >= this.end) return;else if (c2 >= this.end && c1 < this.end) {\n      if (this.heap[c1] > this.heap[p]) {\n        ;\n        [this.heap[p], this.heap[c1]] = [this.heap[c1], this.heap[p]];\n        this.heapifyDown(c1);\n      }\n    } else if (c2 < this.end && c1 >= this.end) {\n      if (this.heap[c2] > this.heap[p]) {\n        ;\n        [this.heap[p], this.heap[c2]] = [this.heap[c2], this.heap[p]];\n        this.heapifyDown(c2);\n      }\n    } else {\n      if (this.heap[p] < this.heap[c1] || this.heap[p] < this.heap[c2]) {\n        if (this.heap[c1] > this.heap[c2]) {\n          ;\n          [this.heap[p], this.heap[c1]] = [this.heap[c1], this.heap[p]];\n          this.heapifyDown(c1);\n        } else {\n          ;\n          [this.heap[p], this.heap[c2]] = [this.heap[c2], this.heap[p]];\n          this.heapifyDown(c2);\n        }\n      }\n    }\n  } //Checks if heap is empty\n\n\n  isEmpty() {\n    return this.end === 0;\n  } //Inserts a value into the heap\n\n\n  insert(value) {\n    this.heap[this.end] = value;\n    this.heapifyUp(this.end++);\n    this.html = this.updateHtml();\n  } //Extracts the top value\n\n\n  removeTop() {\n    if (this.isEmpty()) return -111111;\n    let temp = this.heap[0];\n    this.heap[0] = this.heap[--this.end];\n    this.heapifyDown();\n    this.heap.pop();\n    this.html = this.updateHtml();\n    return temp;\n  } //Deletes an element\n\n\n  deleteEl(value) {\n    let index = this.heap.indexOf(value);\n    if (index === -1) return;\n    this.heap[index] = Number.POSITIVE_INFINITY;\n    this.heapifyUp(index);\n    this.removeTop();\n  } //updates the whole html\n\n\n  updateHtml(p = 0) {\n    if (!this.end) return null;\n    let c1 = 2 * p + 1;\n    let c2 = c1 + 1;\n\n    if (c2 >= this.end && c1 >= this.end) {\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: p,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 6\n        }\n      }, this.heap[p]), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 8\n        }\n      }, \"null\")), /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 8\n        }\n      }, \"null\"))));\n    } else if (c2 >= this.end && c1 < this.end) {\n      let c1Html = this.updateHtml(c1);\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: p,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 6\n        }\n      }, this.heap[p]), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 6\n        }\n      }, c1Html, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 8\n        }\n      }, \"null\"))));\n    } else if (c2 < this.end && c1 >= this.end) {\n      let c2Html = this.updateHtml(c2);\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: p,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 6\n        }\n      }, this.heap[p]), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 6\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"null\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 8\n        }\n      }, \"null\")), c2Html));\n    } else {\n      let c1Html = this.updateHtml(c1);\n      let c2Html = this.updateHtml(c2);\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: p,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"normal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 6\n        }\n      }, this.heap[p]), /*#__PURE__*/React.createElement(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 6\n        }\n      }, c1Html, c2Html));\n    }\n  } //Inserts num random values\n\n\n  generateRandomMaxH(num) {\n    let upper = 0;\n    let lower = num * 2 + 10;\n    let elements = new Set();\n\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n\n      while (elements.has(value)) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n      }\n\n      elements.add(value);\n      this.insert(value);\n    }\n  }\n\n}\n\nexport default MaxHeap;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/maxHeap/DataStructure.js"],"names":["React","MaxHeap","constructor","num","end","heap","html","generateRandomMaxH","heapifyUp","j","p","heapifyDown","c1","c2","isEmpty","insert","value","updateHtml","removeTop","temp","pop","deleteEl","index","indexOf","Number","POSITIVE_INFINITY","c1Html","c2Html","upper","lower","elements","Set","i","Math","floor","random","has","add"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nclass MaxHeap {\r\n\tconstructor(num = 0) {\r\n\t\tthis.end = 0\r\n\t\tthis.heap = []\r\n\t\tthis.html = null\r\n\t\tif (num) {\r\n\t\t\tthis.generateRandomMaxH(num)\r\n\t\t}\r\n\t}\r\n\r\n\t//Helper Functions\r\n\theapifyUp(j) {\r\n\t\tif (j === 0) return\r\n\t\tlet p = j\r\n\t\tif (p % 2 === 0) p -= 2\r\n\t\telse p--\r\n\t\tp /= 2\r\n\t\tif (this.heap[p] < this.heap[j]) {\r\n\t\t\t;[this.heap[p], this.heap[j]] = [this.heap[j], this.heap[p]]\r\n\t\t\tthis.heapifyUp(p)\r\n\t\t}\r\n\t}\r\n\r\n\theapifyDown(p = 0) {\r\n\t\tlet c1 = 2 * p + 1\r\n\t\tlet c2 = c1 + 1\r\n\r\n\t\tif (c2 >= this.end && c1 >= this.end) return\r\n\t\telse if (c2 >= this.end && c1 < this.end) {\r\n\t\t\tif (this.heap[c1] > this.heap[p]) {\r\n\t\t\t\t;[this.heap[p], this.heap[c1]] = [this.heap[c1], this.heap[p]]\r\n\t\t\t\tthis.heapifyDown(c1)\r\n\t\t\t}\r\n\t\t} else if (c2 < this.end && c1 >= this.end) {\r\n\t\t\tif (this.heap[c2] > this.heap[p]) {\r\n\t\t\t\t;[this.heap[p], this.heap[c2]] = [this.heap[c2], this.heap[p]]\r\n\t\t\t\tthis.heapifyDown(c2)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (\r\n\t\t\t\tthis.heap[p] < this.heap[c1] ||\r\n\t\t\t\tthis.heap[p] < this.heap[c2]\r\n\t\t\t) {\r\n\t\t\t\tif (this.heap[c1] > this.heap[c2]) {\r\n\t\t\t\t\t;[this.heap[p], this.heap[c1]] = [\r\n\t\t\t\t\t\tthis.heap[c1],\r\n\t\t\t\t\t\tthis.heap[p],\r\n\t\t\t\t\t]\r\n\t\t\t\t\tthis.heapifyDown(c1)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t;[this.heap[p], this.heap[c2]] = [\r\n\t\t\t\t\t\tthis.heap[c2],\r\n\t\t\t\t\t\tthis.heap[p],\r\n\t\t\t\t\t]\r\n\t\t\t\t\tthis.heapifyDown(c2)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t//Checks if heap is empty\r\n\tisEmpty() {\r\n\t\treturn this.end === 0\r\n\t}\r\n\r\n\t//Inserts a value into the heap\r\n\tinsert(value) {\r\n\t\tthis.heap[this.end] = value\r\n\t\tthis.heapifyUp(this.end++)\r\n\t\tthis.html = this.updateHtml()\r\n\t}\r\n\r\n\t//Extracts the top value\r\n\tremoveTop() {\r\n\t\tif (this.isEmpty()) return -111111\r\n\t\tlet temp = this.heap[0]\r\n\t\tthis.heap[0] = this.heap[--this.end]\r\n\t\tthis.heapifyDown()\r\n\t\tthis.heap.pop()\r\n\t\tthis.html = this.updateHtml()\r\n\r\n\t\treturn temp\r\n\t}\r\n\r\n\t//Deletes an element\r\n\tdeleteEl(value) {\r\n\t\tlet index = this.heap.indexOf(value)\r\n\t\tif (index === -1) return\r\n\t\tthis.heap[index] = Number.POSITIVE_INFINITY\r\n\t\tthis.heapifyUp(index)\r\n\t\tthis.removeTop()\r\n\t}\r\n\r\n\t//updates the whole html\r\n\tupdateHtml(p = 0) {\r\n\t\tif (!this.end) return null\r\n\t\tlet c1 = 2 * p + 1\r\n\t\tlet c2 = c1 + 1\r\n\r\n\t\tif (c2 >= this.end && c1 >= this.end) {\r\n\t\t\treturn (\r\n\t\t\t\t<li key={p}>\r\n\t\t\t\t\t<div className=\"normal\">{this.heap[p]}</div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t} else if (c2 >= this.end && c1 < this.end) {\r\n\t\t\tlet c1Html = this.updateHtml(c1)\r\n\t\t\treturn (\r\n\t\t\t\t<li key={p}>\r\n\t\t\t\t\t<div className=\"normal\">{this.heap[p]}</div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{c1Html}\r\n\t\t\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t} else if (c2 < this.end && c1 >= this.end) {\r\n\t\t\tlet c2Html = this.updateHtml(c2)\r\n\t\t\treturn (\r\n\t\t\t\t<li key={p}>\r\n\t\t\t\t\t<div className=\"normal\">{this.heap[p]}</div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t<li className=\"null\">\r\n\t\t\t\t\t\t\t<div className=\"null\">null</div>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t{c2Html}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t} else {\r\n\t\t\tlet c1Html = this.updateHtml(c1)\r\n\t\t\tlet c2Html = this.updateHtml(c2)\r\n\t\t\treturn (\r\n\t\t\t\t<li key={p}>\r\n\t\t\t\t\t<div className=\"normal\">{this.heap[p]}</div>\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{c1Html}\r\n\t\t\t\t\t\t{c2Html}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</li>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t//Inserts num random values\r\n\tgenerateRandomMaxH(num) {\r\n\t\tlet upper = 0\r\n\t\tlet lower = num * 2 + 10\r\n\t\tlet elements = new Set()\r\n\t\tfor (let i = 0; i < num; i++) {\r\n\t\t\tlet value =\r\n\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\twhile (elements.has(value)) {\r\n\t\t\t\tvalue =\r\n\t\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\t}\r\n\t\t\telements.add(value)\r\n\t\t\tthis.insert(value)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default MaxHeap\r\n"]},"metadata":{},"sourceType":"module"}