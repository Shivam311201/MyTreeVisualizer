{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\trie\\\\DataStructureN.js\";\nimport React from 'react';\nimport words from './AllWords';\n\nclass nodeTrie {\n  constructor(key) {\n    this.isEnd = false;\n    this.children = {};\n    this.parent = null;\n    this.key = key;\n    this.childrenHtml = [];\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"normal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }\n    }, key ? key : 'Root'), this.childrenHtml.length ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 6\n      }\n    }, this.childrenHtml) : null);\n  } //Updates the whole html\n\n\n  updateHtml() {\n    this.childrenHtml = [];\n\n    for (let i = 0; i < Object.keys(this.children).length; i++) {\n      this.childrenHtml.push(this.children[Object.keys(this.children)[i]].html);\n    }\n\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.isEnd ? 'normal end' : 'normal',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }\n    }, this.key ? this.key : 'Root'), this.childrenHtml.length ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 6\n      }\n    }, this.childrenHtml) : null);\n    if (this.parent) this.parent.updateHtml();\n  } //Highlights the prefix\n\n\n  HighlightHtml() {\n    this.childrenHtml = [];\n\n    for (let i = 0; i < Object.keys(this.children).length; i++) {\n      this.childrenHtml.push(this.children[Object.keys(this.children)[i]].html);\n    }\n\n    this.html = /*#__PURE__*/React.createElement(\"li\", {\n      key: this.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.isEnd ? 'normal highlight end' : 'normal highlight',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 5\n      }\n    }, this.key ? this.key : 'Root'), this.childrenHtml.length ? /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 6\n      }\n    }, this.childrenHtml) : null);\n    if (this.parent) this.parent.HighlightHtml();\n  }\n\n}\n\nclass Trie {\n  constructor(num = null) {\n    this.root = new nodeTrie(null);\n    this.highlightStart = null;\n    if (num) this.randomTrie(num);\n  } //Insert\n\n\n  insert(word) {\n    if (word === '') return;\n    word = word.trim();\n    word = word.toUpperCase();\n    let node = this.root;\n\n    for (let i = 0; i < word.length; i++) {\n      if (!node.children[word[i]]) {\n        node.children[word[i]] = new nodeTrie(word[i]);\n        node.children[word[i]].parent = node;\n      }\n\n      node = node.children[word[i]];\n      if (i === word.length - 1) node.isEnd = true;\n    }\n\n    node.updateHtml();\n  } //SearchWord\n\n\n  searchWord(word) {\n    if (word === '') return false;\n    word = word.trim();\n    word = word.toUpperCase();\n    let node = this.root;\n\n    for (let i = 0; i < word.length; i++) {\n      if (!node.children[word[i]]) return false;\n      node = node.children[word[i]];\n      if (i === word.length - 1) return node.isEnd;\n    }\n\n    return false;\n  } //Delete word\n\n\n  deleteWord(word) {\n    if (!this.searchWord(word)) return;\n    word = word.trim();\n    word = word.toUpperCase();\n    let node = this.root;\n\n    for (let i = 0; i < word.length; i++) {\n      node = node.children[word[i]];\n    }\n\n    node.isEnd = false;\n\n    if (Object.keys(node.children).length === 0 && node.children.constructor === Object) {\n      node = node.parent;\n\n      for (let i = word.length - 1; i >= 0; i--) {\n        if (node === this.root) {\n          delete node.children[word[i]];\n          break;\n        }\n\n        if (node.isEnd) {\n          delete node.children[word[i]];\n          break;\n        }\n\n        if (Object.keys(node.children).length > 1) {\n          delete node.children[word[i]];\n          break;\n        }\n\n        node = node.parent;\n      }\n    }\n\n    node.updateHtml();\n  }\n\n  realTimeSearch(word) {\n    if (this.highlightStart) this.highlightStart.updateHtml();\n    this.findPrefix(word);\n  } //findPrefix\n\n\n  findPrefix(word) {\n    if (word === '') return false;\n    word = word.trim();\n    word = word.toUpperCase();\n    let node = this.root;\n\n    for (let i = 0; i < word.length; i++) {\n      if (!node.children[word[i]]) return false;\n      node = node.children[word[i]];\n    }\n\n    node.HighlightHtml();\n    this.highlightStart = node;\n    return true;\n  } //Find all words\n\n\n  findAllWords() {\n    let node = this.root;\n    let allWords = [];\n\n    for (let i = 0; i < Object.keys(node.children).length; i++) {\n      this.findAllWords2(node.children[Object.keys(node.children)[i]], allWords);\n    }\n\n    return allWords;\n  }\n\n  findAllWords2(node, allWords, word = '') {\n    word += node.key;\n    if (node.isEnd) allWords.push(word);\n\n    for (let i = 0; i < Object.keys(node.children).length; i++) {\n      this.findAllWords2(node.children[Object.keys(node.children)[i]], allWords, word);\n    }\n  } //Inserts num random words to the trie\n\n\n  randomTrie(num) {\n    if (num > 993) num = 993;\n    let allWords = words['words'];\n    let upper = 0;\n    let lower = num * 2 + 10;\n    let elements = new Set();\n\n    for (let i = 0; i < num; i++) {\n      let value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n\n      while (elements.has(value) || value > 993) {\n        value = Math.floor(Math.random() * (upper - lower + 1)) + lower;\n      }\n\n      elements.add(value);\n      this.insert(allWords[value]);\n    }\n  }\n\n}\n\nexport default Trie;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/trie/DataStructureN.js"],"names":["React","words","nodeTrie","constructor","key","isEnd","children","parent","childrenHtml","html","length","updateHtml","i","Object","keys","push","HighlightHtml","Trie","num","root","highlightStart","randomTrie","insert","word","trim","toUpperCase","node","searchWord","deleteWord","realTimeSearch","findPrefix","findAllWords","allWords","findAllWords2","upper","lower","elements","Set","value","Math","floor","random","has","add"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport words from './AllWords'\r\n\r\nclass nodeTrie {\r\n\tconstructor(key) {\r\n\t\tthis.isEnd = false\r\n\t\tthis.children = {}\r\n\t\tthis.parent = null\r\n\t\tthis.key = key\r\n\t\tthis.childrenHtml = []\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.key}>\r\n\t\t\t\t<div className=\"normal\">{key ? key : 'Root'}</div>\r\n\t\t\t\t{this.childrenHtml.length ? (\r\n\t\t\t\t\t<ul>{this.childrenHtml}</ul>\r\n\t\t\t\t) : null}\r\n\t\t\t</li>\r\n\t\t)\r\n\t}\r\n\r\n\t//Updates the whole html\r\n\tupdateHtml() {\r\n\t\tthis.childrenHtml = []\r\n\t\tfor (let i = 0; i < Object.keys(this.children).length; i++) {\r\n\t\t\tthis.childrenHtml.push(\r\n\t\t\t\tthis.children[Object.keys(this.children)[i]].html\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.key}>\r\n\t\t\t\t<div className={this.isEnd ? 'normal end' : 'normal'}>\r\n\t\t\t\t\t{this.key ? this.key : 'Root'}\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.childrenHtml.length ? (\r\n\t\t\t\t\t<ul>{this.childrenHtml}</ul>\r\n\t\t\t\t) : null}\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tif (this.parent) this.parent.updateHtml()\r\n\t}\r\n\r\n\t//Highlights the prefix\r\n\tHighlightHtml() {\r\n\t\tthis.childrenHtml = []\r\n\t\tfor (let i = 0; i < Object.keys(this.children).length; i++) {\r\n\t\t\tthis.childrenHtml.push(\r\n\t\t\t\tthis.children[Object.keys(this.children)[i]].html\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\tthis.html = (\r\n\t\t\t<li key={this.key}>\r\n\t\t\t\t<div\r\n\t\t\t\t\tclassName={\r\n\t\t\t\t\t\tthis.isEnd ? 'normal highlight end' : 'normal highlight'\r\n\t\t\t\t\t}\r\n\t\t\t\t>\r\n\t\t\t\t\t{this.key ? this.key : 'Root'}\r\n\t\t\t\t</div>\r\n\t\t\t\t{this.childrenHtml.length ? (\r\n\t\t\t\t\t<ul>{this.childrenHtml}</ul>\r\n\t\t\t\t) : null}\r\n\t\t\t</li>\r\n\t\t)\r\n\r\n\t\tif (this.parent) this.parent.HighlightHtml()\r\n\t}\r\n}\r\n\r\nclass Trie {\r\n\tconstructor(num = null) {\r\n\t\tthis.root = new nodeTrie(null)\r\n\t\tthis.highlightStart = null\r\n\t\tif (num) this.randomTrie(num)\r\n\t}\r\n\r\n\t//Insert\r\n\tinsert(word) {\r\n\t\tif (word === '') return\r\n\t\tword = word.trim()\r\n\t\tword = word.toUpperCase()\r\n\t\tlet node = this.root\r\n\t\tfor (let i = 0; i < word.length; i++) {\r\n\t\t\tif (!node.children[word[i]]) {\r\n\t\t\t\tnode.children[word[i]] = new nodeTrie(word[i])\r\n\t\t\t\tnode.children[word[i]].parent = node\r\n\t\t\t}\r\n\t\t\tnode = node.children[word[i]]\r\n\t\t\tif (i === word.length - 1) node.isEnd = true\r\n\t\t}\r\n\t\tnode.updateHtml()\r\n\t}\r\n\r\n\t//SearchWord\r\n\tsearchWord(word) {\r\n\t\tif (word === '') return false\r\n\t\tword = word.trim()\r\n\t\tword = word.toUpperCase()\r\n\t\tlet node = this.root\r\n\t\tfor (let i = 0; i < word.length; i++) {\r\n\t\t\tif (!node.children[word[i]]) return false\r\n\t\t\tnode = node.children[word[i]]\r\n\t\t\tif (i === word.length - 1) return node.isEnd\r\n\t\t}\r\n\t\treturn false\r\n\t}\r\n\r\n\t//Delete word\r\n\tdeleteWord(word) {\r\n\t\tif (!this.searchWord(word)) return\r\n\t\tword = word.trim()\r\n\t\tword = word.toUpperCase()\r\n\t\tlet node = this.root\r\n\t\tfor (let i = 0; i < word.length; i++) {\r\n\t\t\tnode = node.children[word[i]]\r\n\t\t}\r\n\t\tnode.isEnd = false\r\n\r\n\t\tif (\r\n\t\t\tObject.keys(node.children).length === 0 &&\r\n\t\t\tnode.children.constructor === Object\r\n\t\t) {\r\n\t\t\tnode = node.parent\r\n\t\t\tfor (let i = word.length - 1; i >= 0; i--) {\r\n\t\t\t\tif (node === this.root) {\r\n\t\t\t\t\tdelete node.children[word[i]]\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tif (node.isEnd) {\r\n\t\t\t\t\tdelete node.children[word[i]]\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (Object.keys(node.children).length > 1) {\r\n\t\t\t\t\tdelete node.children[word[i]]\r\n\t\t\t\t\tbreak\r\n\t\t\t\t}\r\n\t\t\t\tnode = node.parent\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tnode.updateHtml()\r\n\t}\r\n\r\n\trealTimeSearch(word) {\r\n\t\tif (this.highlightStart) this.highlightStart.updateHtml()\r\n\t\tthis.findPrefix(word)\r\n\t}\r\n\r\n\t//findPrefix\r\n\tfindPrefix(word) {\r\n\t\tif (word === '') return false\r\n\t\tword = word.trim()\r\n\t\tword = word.toUpperCase()\r\n\t\tlet node = this.root\r\n\t\tfor (let i = 0; i < word.length; i++) {\r\n\t\t\tif (!node.children[word[i]]) return false\r\n\t\t\tnode = node.children[word[i]]\r\n\t\t}\r\n\t\tnode.HighlightHtml()\r\n\t\tthis.highlightStart = node\r\n\t\treturn true\r\n\t}\r\n\r\n\t//Find all words\r\n\tfindAllWords() {\r\n\t\tlet node = this.root\r\n\t\tlet allWords = []\r\n\t\tfor (let i = 0; i < Object.keys(node.children).length; i++) {\r\n\t\t\tthis.findAllWords2(\r\n\t\t\t\tnode.children[Object.keys(node.children)[i]],\r\n\t\t\t\tallWords\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn allWords\r\n\t}\r\n\r\n\tfindAllWords2(node, allWords, word = '') {\r\n\t\tword += node.key\r\n\t\tif (node.isEnd) allWords.push(word)\r\n\t\tfor (let i = 0; i < Object.keys(node.children).length; i++) {\r\n\t\t\tthis.findAllWords2(\r\n\t\t\t\tnode.children[Object.keys(node.children)[i]],\r\n\t\t\t\tallWords,\r\n\t\t\t\tword\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\t//Inserts num random words to the trie\r\n\trandomTrie(num) {\r\n\t\tif (num > 993) num = 993\r\n\t\tlet allWords = words['words']\r\n\t\tlet upper = 0\r\n\t\tlet lower = num * 2 + 10\r\n\t\tlet elements = new Set()\r\n\t\tfor (let i = 0; i < num; i++) {\r\n\t\t\tlet value =\r\n\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\twhile (elements.has(value) || value > 993) {\r\n\t\t\t\tvalue =\r\n\t\t\t\t\tMath.floor(Math.random() * (upper - lower + 1)) + lower\r\n\t\t\t}\r\n\t\t\telements.add(value)\r\n\t\t\tthis.insert(allWords[value])\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Trie\r\n"]},"metadata":{},"sourceType":"module"}