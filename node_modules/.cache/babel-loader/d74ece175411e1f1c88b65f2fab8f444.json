{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gargs\\\\OneDrive\\\\Desktop\\\\Tree visualizer\\\\Tree-Visualizer-React-Project\\\\src\\\\components\\\\redBlack\\\\RedBTree.js\";\nimport React, { useState, useEffect } from 'react';\nimport RedBMenu from './RedBMenu';\nimport RBT from './DataStructure';\nimport RedBPopup from './RedBPopup';\nimport useDelError from '../../hooks/useDelError';\nimport { Icon } from '@iconify/react';\nimport questionMarkCircleOutline from '@iconify/icons-eva/question-mark-circle-outline';\nimport usePopup from '../../hooks/usePopup';\nimport useTraversal from '../../hooks/useTraversal';\n\nfunction RedBTree(props) {\n  //hooks\n  const [tree, setTree] = useState();\n  const [treeHtml, setTreeHtml] = useState();\n  const [bstList, setBstList] = useState([]);\n  const [delError, setDelError] = useDelError(treeHtml);\n  const [searchError, setSearchError] = useDelError(treeHtml);\n  const [traversalList, traversalDispatch] = useTraversal(tree);\n  const [popup, togglePopup] = usePopup(); //Initializing Tree\n\n  useEffect(() => {\n    let tempTree = new RBT();\n    setTree(tempTree);\n    setTreeHtml(tempTree.root.html);\n    return () => {\n      setTree(null);\n      setTreeHtml(null);\n    };\n  }, []);\n  useEffect(() => {\n    setBstList([]);\n  }, [treeHtml]); //Insert Function\n\n  const insert = val => {\n    val = parseInt(val);\n    if (!val) return;\n    let tempTree = tree;\n    tempTree.insert(val);\n    setTree(tempTree);\n    setTreeHtml(tree.root.html);\n    traversalDispatch('clear');\n  }; //Remove\n\n\n  const remove = val => {\n    val = parseInt(val);\n    let tempTree = tree;\n    setDelError(false);\n\n    if (!tempTree.search(val)) {\n      setDelError(true);\n      return;\n    }\n\n    tempTree.remove(val);\n    setTree(tempTree);\n    if (tree.root) setTreeHtml(tree.root.html);else setTreeHtml(null);\n    traversalDispatch('clear');\n  }; //Search\n\n\n  const search = val => {\n    val = parseInt(val);\n    let tempTree = tree;\n    setSearchError(false);\n\n    if (!tempTree.search(val)) {\n      setSearchError(true);\n      return;\n    }\n\n    tempTree.search(val);\n    setTree(tempTree);\n    if (tree.root) setTreeHtml(tree.root.html);else setTreeHtml(null);\n  }; //Generate Random BST with num nodes\n\n\n  const random = num => {\n    num = parseInt(num);\n    if (num < 0) return;\n    let tempTree = new RBT(num);\n    setTree(tempTree);\n    setTreeHtml(tempTree.root.html);\n    traversalDispatch('clear');\n  }; //Checks whether BST is balanced, complete, perfect or full\n\n\n  const check = () => {\n    let tempList = tree.checkBST();\n    if (!tempList.length) tempList.push('No Type Match');\n    setBstList(tempList);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"heading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, \"Red Black Tree\", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"i\",\n    onClick: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    icon: questionMarkCircleOutline,\n    width: \"25px\",\n    height: \"25px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => props.selector('menu'),\n    className: \"main-menu-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 5\n    }\n  }, \"Home\")), /*#__PURE__*/React.createElement(RedBMenu, {\n    insert: insert,\n    remove: remove,\n    search: search,\n    random: random,\n    traversal: traversalDispatch,\n    check: check,\n    delError: delError ? 'error' : '',\n    seaError: searchError ? 'error' : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 4\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"traversal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 4\n    }\n  }, traversalList.list.length ? /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 6\n    }\n  }, ' ', traversalList.op, \":\", traversalList.list.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 8\n    }\n  }, item))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 6\n    }\n  }, \"No Traversal Performed\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"bstlist\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 4\n    }\n  }, bstList.length ? /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 6\n    }\n  }, ' ', bstList.map((item, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 8\n    }\n  }, item))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 6\n    }\n  }, \"Not yet checked\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tree\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  }, treeHtml)), popup ? /*#__PURE__*/React.createElement(RedBPopup, {\n    toggle: togglePopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }) : null);\n}\n\nexport default RedBTree;","map":{"version":3,"sources":["C:/Users/gargs/OneDrive/Desktop/Tree visualizer/Tree-Visualizer-React-Project/src/components/redBlack/RedBTree.js"],"names":["React","useState","useEffect","RedBMenu","RBT","RedBPopup","useDelError","Icon","questionMarkCircleOutline","usePopup","useTraversal","RedBTree","props","tree","setTree","treeHtml","setTreeHtml","bstList","setBstList","delError","setDelError","searchError","setSearchError","traversalList","traversalDispatch","popup","togglePopup","tempTree","root","html","insert","val","parseInt","remove","search","random","num","check","tempList","checkBST","length","push","selector","list","op","map","item","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport RedBMenu from './RedBMenu'\r\nimport RBT from './DataStructure'\r\nimport RedBPopup from './RedBPopup'\r\nimport useDelError from '../../hooks/useDelError'\r\nimport { Icon } from '@iconify/react'\r\nimport questionMarkCircleOutline from '@iconify/icons-eva/question-mark-circle-outline'\r\nimport usePopup from '../../hooks/usePopup'\r\nimport useTraversal from '../../hooks/useTraversal'\r\n\r\nfunction RedBTree(props) {\r\n\t//hooks\r\n\tconst [tree, setTree] = useState()\r\n\tconst [treeHtml, setTreeHtml] = useState()\r\n\tconst [bstList, setBstList] = useState([])\r\n\tconst [delError, setDelError] = useDelError(treeHtml)\r\n\tconst [searchError, setSearchError] = useDelError(treeHtml)\r\n\tconst [traversalList, traversalDispatch] = useTraversal(tree)\r\n\tconst [popup, togglePopup] = usePopup()\r\n\r\n\t//Initializing Tree\r\n\tuseEffect(() => {\r\n\t\tlet tempTree = new RBT()\r\n\t\tsetTree(tempTree)\r\n\t\tsetTreeHtml(tempTree.root.html)\r\n\t\treturn () => {\r\n\t\t\tsetTree(null)\r\n\t\t\tsetTreeHtml(null)\r\n\t\t}\r\n\t}, [])\r\n\r\n\tuseEffect(() => {\r\n\t\tsetBstList([])\r\n\t}, [treeHtml])\r\n\r\n\t//Insert Function\r\n\tconst insert = val => {\r\n\t\tval = parseInt(val)\r\n\t\tif (!val) return\r\n\t\tlet tempTree = tree\r\n\t\ttempTree.insert(val)\r\n\t\tsetTree(tempTree)\r\n\t\tsetTreeHtml(tree.root.html)\r\n\t\ttraversalDispatch('clear')\r\n\r\n\t}\r\n\r\n\t//Remove\r\n\tconst remove = val => {\r\n\t\tval = parseInt(val)\r\n\t\tlet tempTree = tree\r\n\t\tsetDelError(false)\r\n\t\tif (!tempTree.search(val)) {\r\n\t\t\tsetDelError(true)\r\n\t\t\treturn\r\n\t\t}\r\n\t\ttempTree.remove(val)\r\n\t\tsetTree(tempTree)\r\n\t\tif (tree.root) setTreeHtml(tree.root.html)\r\n\t\telse setTreeHtml(null)\r\n\t\ttraversalDispatch('clear')\r\n\r\n\t}\r\n\r\n\t//Search\r\n\tconst search = val => {\r\n\t\tval = parseInt(val)\r\n\t\tlet tempTree = tree\r\n\r\n\t\tsetSearchError(false)\r\n\t\tif (!tempTree.search(val)) {\r\n\t\t\tsetSearchError(true)\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\ttempTree.search(val)\r\n\t\tsetTree(tempTree)\r\n\t\tif (tree.root) setTreeHtml(tree.root.html)\r\n\t\telse setTreeHtml(null)\r\n\t}\r\n\r\n\t//Generate Random BST with num nodes\r\n\tconst random = num => {\r\n\t\tnum = parseInt(num)\r\n\t\tif (num < 0) return\r\n\t\tlet tempTree = new RBT(num)\r\n\t\tsetTree(tempTree)\r\n\t\tsetTreeHtml(tempTree.root.html)\r\n\t\ttraversalDispatch('clear')\r\n\r\n\t}\r\n\r\n\t//Checks whether BST is balanced, complete, perfect or full\r\n\tconst check = () => {\r\n\t\tlet tempList = tree.checkBST()\r\n\t\tif (!tempList.length) tempList.push('No Type Match')\r\n\t\tsetBstList(tempList)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<header>\r\n\t\t\t\t<h1 className=\"heading\">\r\n\t\t\t\t\tRed Black Tree\r\n\t\t\t\t\t<button className=\"i\" onClick={togglePopup}>\r\n\t\t\t\t\t\t<Icon\r\n\t\t\t\t\t\t\ticon={questionMarkCircleOutline}\r\n\t\t\t\t\t\t\twidth=\"25px\"\r\n\t\t\t\t\t\t\theight=\"25px\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</h1>\r\n\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={() => props.selector('menu')}\r\n\t\t\t\t\tclassName=\"main-menu-button\"\r\n\t\t\t\t>\r\n\t\t\t\t\tHome\r\n\t\t\t\t</button>\r\n\t\t\t</header>\r\n\t\t\t<RedBMenu\r\n\t\t\t\tinsert={insert}\r\n\t\t\t\tremove={remove}\r\n\t\t\t\tsearch={search}\r\n\t\t\t\trandom={random}\r\n\t\t\t\ttraversal={traversalDispatch}\r\n\t\t\t\tcheck={check}\r\n\t\t\t\tdelError={delError ? 'error' : ''}\r\n\t\t\t\tseaError={searchError ? 'error' : ''}\r\n\t\t\t/>\r\n\t\t\t<div className=\"traversal\">\r\n\t\t\t\t{traversalList.list.length ? (\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t{traversalList.op}:\r\n\t\t\t\t\t\t{traversalList.list.map((item, index) => (\r\n\t\t\t\t\t\t\t<li key={index}>{item}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<p>No Traversal Performed</p>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"bstlist\">\r\n\t\t\t\t{bstList.length ? (\r\n\t\t\t\t\t<ul>\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t{bstList.map((item, index) => (\r\n\t\t\t\t\t\t\t<li key={index}>{item}</li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t) : (\r\n\t\t\t\t\t<p>Not yet checked</p>\r\n\t\t\t\t)}\r\n\t\t\t</div>\r\n\t\t\t<div className=\"tree\">\r\n\t\t\t\t<ul>{treeHtml}</ul>\r\n\t\t\t</div>\r\n\t\t\t{popup ? <RedBPopup toggle={togglePopup} /> : null}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default RedBTree\r\n"]},"metadata":{},"sourceType":"module"}